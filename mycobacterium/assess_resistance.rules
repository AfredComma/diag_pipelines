from snakemake.utils import report
import re
import os
import pandas

shell.prefix("set -euo pipefail;")

include: "../assembly/assembly.rules"

rule get_h37rv_genome:
    conda:
        "env/entrez-direct.yaml"
    output:
        "reference/h37rv.gbk"
    shell:
        """
        esearch -db assembly -query h37rv | efetch -db assembly -format docsum | xtract -pattern DocumentSummary -if RefSeq_category -equals "reference genome" -element FtpPath_RefSeq | sed  "s/\(\/GCF_.*\)/\\1\\1_genomic.gbff.gz/" | xargs wget -qO- | gzip -d > {output[0]}
        """

rule index_resistance_genes:
    conda:
        "env/bwa.yaml"
    input:
        "reference/resistance.fna"
    output:
        "reference/resistance.fna.bwt"
    shell:
        "bwa index {input[0]}"

        
rule align_to_resistome_paired:
    conda:
        "env/bwa.yaml"
    input:
        "reference/resistance.fna",
        "reference/resistance.fna.bwt",
        files=lambda wildcards: expand("reads/raw/"+wildcards.sample+"_{ext}", ext=extension[wildcards.sample])
    output:
        temp("{sample}/resistance/resistome_mapping.sam")
    shell:
        """
        bwa mem {input[0]} {input.files} > {output[0]} 
        """
        
rule sort_mapping:
    conda:
        "env/samtools.yaml"
    input:
        "{sample}/resistance/resistome_mapping.sam"
    output:
        temp("{sample}/resistance/resistome_mapping.bam")
    shell:
        "samtools sort {input[0]} > {output[0]}"

rule index_mapping:
    conda:
        "env/bwa.yaml"
    input:
        "{sample}/resistance/resistome_mapping.bam"
    output:
        "{sample}/resistance/resistome_mapping.bam.bai"
    shell:
        "samtools index {input[0]}"
        
rule get_resistance_genes:
    conda:
        "env/biopython-mysql.yaml"
    input:
        "reference/h37rv.gbk"
    output:
        "reference/resistance.fna",
        "reference/resistance.faa"
    script:
        "scripts/extract_resistance_genes_from_reference.py"

rule variant_calling:
    conda:
        "env/bcftools.yaml"
    input:
        "{sample}/resistance/resistome_mapping.bam",
        "reference/resistance.fna"
    output:
        "{sample}/resistance/variants.vcf"
    shell:
        "bcftools mpileup -Ou -f {input[1]} {input[0]} | bcftools call --ploidy 1 -vm > {output[0]}"

rule rgi:
    conda:
        "env/rgi.yaml"
    input:
        "{sample}/annotation/{sample}.faa"
    output:
        "{sample}/resistance/rgi.json"
    shell:
        "rgi -t protein -i {input} -o {wildcards.sample}/resistance/rgi"

rule extract_rgi_res:
    conda:
        "env/biopython-mysql.yaml"
    input:
        "{sample}/resistance/rgi.json",
        ancient("/home/sacha/.my.cnf")
    output:
        "logs/{sample}/rgi_mysql.txt"
    script:
        "scripts/parse_rgi_json.py"

rule call_protein_variants_from_vcf:
    conda:
        "env/pyvcf.yaml"
    input:
        "{sample}/resistance/variants.vcf",
        ancient("reference/resistance.fna"),
        ancient("/home/sacha/.my.cnf")
    output:
        "logs/{sample}/local_mysql.txt"
    script:
        "scripts/call_protein_variants.py"

#rule all:
#    input:
#        locals=expand("logs/{sample}/local_mysql.txt", sample=list(mdr_tb_study.index.values))
