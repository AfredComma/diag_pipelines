from snakemake.utils import report
import re, json, pandas

shell.prefix("set -euo pipefail;") 

include: "../assembly/assembly.rules"
configfile: "config.yaml"

samples = pandas.read_csv(config["samples"])
    
genes_of_interest=["gyrA", "rpoB", "rpsL", "katG", "embB"]

rule get_sra:
    conda:
        "env/sra-tools.yaml"
    output:
        temp("reads/raw/{sample}_R1_001.fastq"),
        temp("reads/raw/{sample}_R2_001.fastq")
    params:
        samples_file = config["samples"]
    shell:
        """
        sra=$(cut -f1,5 -d',' {params.samples_file} | grep "^{wildcards.sample}," | sed "s/.*,//")
        fastq-dump --split-files --outdir reads/raw/ ${{sra}}
        mv reads/raw/${{sra}}_1.fastq reads/raw/{wildcards.sample}_R1_001.fastq 
        mv reads/raw/${{sra}}_2.fastq reads/raw/{wildcards.sample}_R2_001.fastq 
        """

rule compare_genome:
    conda:
        "env/quast.yaml"
    input:
        "{sample}/annotation/{sample}.fsa",
        "{sample}/reference/ref.fna"
    output:
        "{sample}/qc/quast/report.txt"
    shell:
        "quast.py {input[0]} -R {input[1]} -o $(dirname  {output[0]}"

rule rgi:
    conda:
        "env/rgi.yaml"
    input:
        "{sample}/annotation/{sample}.faa"
    output:
        "{sample}/resistance/rgi.json"
    shell:
        "rgi -t protein -i {input} -o {wildcards.sample}/resistance/rgi"



rule extract_resistance_gene:
    conda:
        "env/biopython.yaml"
    input:
        "{sample}/annotation/{sample}.gbk"
    output:
        "{sample}/resistance/genes.faa"
    script:
        "scripts/extract_res_genes.py"
        

def extract_resistance_results_rgi(filename, genes):
    data={}
    with open(filename, "r") as f:
        rgi = json.load(f)
        for j in rgi.keys():
            if j != "_metadata":
                for k in rgi[j].keys():
                    try: 
                        snp=rgi[j][k]["SNP"]
                        try:
                            antibio=rgi[j][k]["ARO_name"].split()[-1]
                            if antibio not in data:
                                data[antibio]={}
                            data[antibio].setdefault(list(set(rgi[j][k]["ARO_name"].split()).intersection(genes))[0], []).append(snp["original"]+str(snp["position"])+snp["change"])
                        except IndexError:
                            pass
                    except KeyError:
                        pass
                    #                             try:
                    #                                for l in rgi[j][k]["ARO_category"]:
                    #                                    print(rgi[j][k]["ARO_category"][l])
                    #                                    print(rgi[j][k]["ARO_category"][l]["category_aro_description"])
                    #                            except KeyError:
                    #                                print(rgi[j][k])

    return(data)


rule report:
    input:
        expand("{sample}/report.html", sample=list(samples.Specimen)),
        rgis=expand("{sample}/resistance/rgi.json", sample=list(samples.Specimen))
    output:
        "report.html"
    params:
        genes=genes_of_interest
    run:
        for i in input["rgis"]:
            rgi = extract_resistance_results_rgi(i, params["genes"])
            print(rgi)
        report("""
        Report of the comparative genomics pipeline 
        """, output[0])
