rule annotate_with_prokka:
    conda:
        "../../envs/prokka.yaml"
    input:
        "samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_high_coverage.fasta"
    output:
        "samples/{sample}/annotation/{sample}.log",
        "samples/{sample}/annotation/{sample}.gff",
        "samples/{sample}/annotation/{sample}.faa",
        "samples/{sample}/annotation/{sample}.fsa",
        "samples/{sample}/annotation/{sample}.txt",
        "samples/{sample}/annotation/{sample}.gbk",
        "samples/{sample}/annotation/{sample}.ffn"
    params:
        genus = lambda wildcards: all_samples.loc[wildcards.sample, "ScientificName"].split(" ")[0],
        spec = lambda wildcards: all_samples.loc[wildcards.sample, "ScientificName"].split(" ")[1]
    shell:
        "prokka --quiet --outdir $( dirname {output[0]}) --force {input} --prefix {wildcards.sample} --strain {wildcards.sample} --genus '{params.genus}' --species '{params.spec}' --locustag 'prokka'"

rule prokka_temporary_file:
    conda:
        "../../envs/prokka.yaml"
    input:
        "samples/{sample}/assembly/spades/contigs_500bp_renamed.fasta"
    output:
        "samples/{sample}/assembly/spades/temporary_annotation/{sample}.fsa"
    params:
        genus = lambda wildcards: all_samples.loc[wildcards.sample, "ScientificName"].split(" ")[0],
        spec = lambda wildcards: all_samples.loc[wildcards.sample, "ScientificName"].split(" ")[1],
    shell:
        "prokka --quiet --outdir $( dirname {output[0]}) --force {input} --prefix {wildcards.sample} --strain {wildcards.sample} --genus '{params.genus}' --species '{params.spec}' --locustag 'prokka'"


rule hashing_genes:
    conda:
        "../../envs/biopython.yaml"
    input:
        "samples/{sample}/annotation/{sample}.ffn"
    output:
        "samples/{sample}/annotation/{sample}_hashes.txt"
    script:
        "scripts/hashing_genes.py"
    

rule create_database_from_protein_sequences:
    conda:
        "../../envs/blast.yaml"
    input:
        "samples/{sample}/annotation/{sample}.faa",
    output:
        "samples/{sample}/annotation/{sample}.faa.phr",
    shell:
        """
        makeblastdb -dbtype prot -in {input[0]}
        """


rule create_database_from_contig_sequences:
    conda:
        "../../envs/blast.yaml"
    input:
        "samples/{sample}/annotation/{sample}.fsa",
    output:
        "samples/{sample}/annotation/{sample}.fsa.nhr",
    shell:
        """
        makeblastdb -dbtype nucl -in {input[0]}
        """

rule remove_fasta_part_from_gff:
    input:
        "samples/{sample}/annotation/{sample}.gff"
    output:
        "samples/{sample}/annotation/{sample}_truncated.gff"
    shell:
        "sed '/^##FASTA$/,$d' {input} > {output}"
    
