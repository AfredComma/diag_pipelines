rule rgi:
    conda:
        "env/rgi.yaml"
    input:
        "strains/{sample}/annotation/{sample}.faa"
    output:
        "strains/{sample}/resistance/rgi.json"
    shell:
        """
        rgi -t protein -i {input} -o strains/{wildcards.sample}/resistance/rgi
        """

rule rgi_json_to_tsv:
    conda:
        "env/rgi.yaml"
    input:
        "strains/{sample}/resistance/rgi.json"
    output:
        "strains/{sample}/resistance/rgi.tsv"
    shell:
        """
        rgi_jsontab -v ON -i {input[0]} -o {output[0]}
        mv {output[0]}.txt {output[0]}
        """
    
rule abricate:
    conda:
        "env/abricate.yaml"
    input:
        "strains/{sample}/annotation/{sample}.gbk"
    output:
        "strains/{sample}/resistance/abricate.txt"
    log:
        "strains/{sample}/logs/abricate.txt"
    shell:
        """
        abricate --nopath --db resfinder {input[0]} 2> {log} 1> {output[0]} 
        """
        
rule mykrobe:
    conda:
        "env/mykrobe.yaml"
    input:
        "reads/raw/{sample}_R1.fastq.gz",
        "reads/raw/{sample}_R2.fastq.gz",
    output:
        "strains/{sample}/resistance/mykrobe.json"
    params:
        species = spec_for_mykrobe
    shell:
        """
        mykrobe predict "{wildcards.sample}" "{params.species}" -1 {input[0]} --min_variant_conf 100  > {output[0]} 
        """



rule mykrobe_json_to_tsv:
    input:
        "strains/{sample}/resistance/mykrobe.json",
    output:
        "strains/{sample}/resistance/mykrobe.tsv"
    script:
        "scripts/mykrobe_json_to_tsv.py"

        
