rule search_resistance_with_rgi:
    conda:
        "../../envs/rgi.yaml"
    input:
        "samples/{sample}/annotation/{sample}.fsa"
    output:
        "samples/{sample}/resistance/rgi.json"
    shell:
        """
        rgi -t contig -i {input[0]} -o $(dirname {output[0]})/rgi
        """
        

rule generate_rgi_tsv_file_from_json_file:
    conda:
        "../../envs/rgi.yaml"
    input:
        "samples/{sample}/resistance/rgi.json"
    output:
        "samples/{sample}/resistance/rgi.tsv"
    shell:
        """
        rgi_jsontab -v ON -i {input[0]} -o {output[0]}
        mv {output[0]}.txt {output[0]}
        """

        
rule search_resistance_paired_reads_with_mykrobe:
    conda:
        "../../envs/mykrobe.yaml"
    input:
        "samples/{sample}/reads/raw/{sample}_R1.fastq.gz",
        "samples/{sample}/reads/raw/{sample}_R2.fastq.gz",
    output:
        "samples/{sample}/resistance/mykrobe.json"
    params:
        species = config["spec_for_mykrobe"]
    shell:
        """
        mykrobe predict "{wildcards.sample}" "{params.species}" --seq {input} --min_variant_conf 100  > {output[0]} 
        """

        
rule search_resistance_single_reads_with_mykrobe:
    conda:
        "../../envs/mykrobe.yaml"
    input:
        "samples/{sample}/reads/raw/{sample}_single.fastq.gz",
    output:
        "samples/{sample}/resistance/mykrobe.json"
    params:
        species = config["spec_for_mykrobe"]
    shell:
        """
        mykrobe predict "{wildcards.sample}" "{params.species}" --seq {input[0]} --min_variant_conf 100  > {output[0]} 
        """


rule generate_mykrobe_tsv_file_from_json_file:
    input:
        "samples/{sample}/resistance/mykrobe.json",
    output:
        "samples/{sample}/resistance/mykrobe.tsv"
    script:
        "scripts/mykrobe_json_to_tsv.py"


rule summary_csv_excel_file:
    params:
        ontology_aro = ontology_file_aro,
        ontology_mo = ontology_file_mo,
        ontology_ro = ontology_file_ro,
        currated_genes = genes
    conda:
        "../../envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        expand("samples/{{sample}}/resistance/{software}.tsv", software = config["resistance_prediction_softwares"])
    output:
        "samples/{sample}/resistance/summary.tsv",
        "samples/{sample}/resistance/summary.xlsx",
    script:
        "scripts/summary_csv_xlsx.py"


rule write_congruent_results_fasta:
    conda:
        "../../envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        "samples/{sample}/resistance/summary.tsv",
        "samples/{sample}/resistance/rgi.tsv",
    output:
        "samples/{sample}/resistance/sequences.ffn",
        "samples/{sample}/resistance/sequences.faa",
    script:
        "scripts/summary_to_fasta.py"


rule merge_summary_xlsx_files:
    conda:
        "../../envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        xlsx=expand("samples/{sample}/resistance/summary.xlsx", sample = read_naming.keys()),
#        fastas=expand("samples/{sample}/resistance/sequences.faa", sample = read_naming.keys()),
    output:
        "resistance_summary.xlsx"
    script:
        "scripts/merge_summary_xlsx.py"

        
        
