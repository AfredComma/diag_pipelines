rule create_reference_lists_from_databases:
    conda:
        pipeline_path + "envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        miotto = pipeline_path + "data/mycobacterium/mutation_dbs/miotto_high_moderate_minimum_confidence_annotated.tsv",
        mykrobe = pipeline_path + "data/mycobacterium/mutation_dbs/mykrobe_annotated.tsv",
        card = pipeline_path + "data/mycobacterium/mutation_dbs/rgi_annotated_full_2_0_0.tsv",
        walker = pipeline_path +"data/mycobacterium/mutation_dbs/walker_resistant_annotated.tsv",
        resistance_genes = pipeline_path + "data/mycobacterium/mutations_dbs/resistance_genes.tsv",
        locus_tag = pipeline_path + "data/mycobacterium/metadata/locus_tags.tsv",
    output:
        bed_four_codons = "references/m_tuberculosis_resistance_genes_4_db_mutations/codons.bed",
        bed_three_codons = "references/m_tuberculosis_resistance_genes_3_db_mutations/codons.bed",
        bed_two_codons = "references/m_tuberculosis_resistance_genes_2_db_mutations/codons.bed",
        bed_one_codons = "references/m_tuberculosis_resistance_genes_1_db_mutations/codons.bed",
        bed_four_nucleotides = "references/m_tuberculosis_resistance_genes_4_db_mutations/nucleotides.bed",
        bed_three_nucleotides = "references/m_tuberculosis_resistance_genes_3_db_mutations/nucleotides.bed",
        bed_two_nucleotides = "references/m_tuberculosis_resistance_genes_2_db_mutations/nucleotides.bed",
        bed_one_nucleotides = "references/m_tuberculosis_resistance_genes_1_db_mutations/nucleotides.bed",
        summary_four = "references/m_tuberculosis_resistance_genes_4_db_mutations/summary.xlsx",
        summary_three = "references/m_tuberculosis_resistance_genes_3_db_mutations/summary.xlsx",
        summary_two = "references/m_tuberculosis_resistance_genes_2_db_mutations/summary.xlsx",
        summary_one = "references/m_tuberculosis_resistance_genes_1_db_mutations/summary.xlsx",
    script:
        "scripts/generate_excel_file_common_positions.py"

rule check_annotated_mutations_from_database:
    conda:
        pipeline_path + "envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        db = pipeline_path + "data/mycobacterium/mutation_dbs/{db}.tsv",
        gene_to_locus = pipeline_path + "data/mycobacterium/metadata/locus_tags.tsv",
        gbk = "references/NC_000962.3/genome_gbwithparts.gbwithparts",
    output:
        correct_annotation = "references/m_tuberculosis_resistance_{db}/correct.tsv",
        incorrect_annotation = "references/m_tuberculosis_resistance_{db}/incorrect.tsv",
    script:
        "scripts/check_locus_against_database.py"
        
rule convert_mutation_positions_to_bed_files_to_full_genome:
    conda:
        pipeline_path + "envs/pandas-openpyxl-pronto-xlrd.yaml"
    params:
        upstream_downstream_size = shift
    input:
        db_correct = "references/m_tuberculosis_resistance_{db}/correct.tsv",
        gene_to_locus = pipeline_path + "data/mycobacterium/metadata/locus_tags.tsv",
        gbk = "references/NC_000962.3/genome_gbwithparts.gbk",
    output:
        bed_shifted = "references/m_tuberculosis_resistance_{db}/full_genome.bed",
    script:
        "scripts/convert_mutation_positions_to_bed_files_full_genome.py"
        
rule convert_mutation_positions_to_bed_files:
    conda:
        pipeline_path + "envs/pandas-openpyxl-pronto-xlrd.yaml"
    params:
        upstream_downstream_size = shift
    input:
        db_correct = "references/m_tuberculosis_resistance_{db}/correct.tsv",
        gene_to_locus = pipeline_path + "data/mycobacterium/metadata/locus_tags.tsv",
    output:
        bed_shifted = "references/m_tuberculosis_resistance_{db}/shifted.bed",
    script:
        "scripts/convert_mutation_positions_to_bed_files.py"
        
rule merge_nucleotides_and_codons_bed_files:
    input:
        cds = "references/{any}/codons.bed",
        not_cds = "references/{any}/nucleotides.bed",
    output:
        both = temp("references/{any}/codons_and_nucleotides.bed")
    shell:
        """
        cat {input[cds]} {input[not_cds]} > {output[both]}
        """

rule extract_all_locus_tags:
    input:
        annotated = "references/{any}/shifted.bed",
    output:
        locus = "references/{any}/locus.txt"
    shell:
        """
        cut -f1 {input[annotated]} | sort | uniq > {output[locus]}
        """
        
rule fetch_locus_tag_sequences_from_accession:
    conda:
        pipeline_path + "envs/biopython.yaml"
    params:
        upstream_downstream_size = shift
    input:
        locus_list = "references/m_tuberculosis_resistance_{db}/locus.txt",
        gbk = "references/NC_000962.3/genome_gbwithparts.gbwithparts",
    output:
        genes = "references/m_tuberculosis_resistance_{db}/genome_fasta.fasta",
    script:
        "scripts/fetch_locus_tag_sequences_from_accession.py"

        
rule remove_shift_from_fasta_sequences:
    conda:
        pipeline_path + "envs/fastx.yaml"
    params:
        upstream_downstream_size = shift
    input:
        fasta = "{ref}.fasta",
    output:
        trimmed = "{ref}_trimmed.fasta",
    shell:
        """
        fasta_formatter -i {input[fasta]} | fastx_trimmer -f $(( {params.upstream_downstream_size}+1 )) > {output[trimmed]}
        """

rule shift_positions_from_genotype_vcf:
    conda:
        pipeline_path + "envs/bcftools.yaml"
    params:
        upstream_downstream_size = shift
    input:
        vcf = "samples/{sample}/typing/freebayes/bwa/{ref}.vcf.gz",
        vcf_tbi = "samples/{sample}/typing/freebayes/bwa/{ref}.vcf.gz.tbi",
    output:
        vcf_shifted = "samples/{sample}/typing/freebayes/bwa/{ref}_shifted.vcf",
    shell:
        """
        bcftools view -h {input[vcf]} > {output[vcf_shifted]}
        bcftools view -H {input[vcf]} | awk -v shift="{params[upstream_downstream_size]}" -F$'\t' '$2=$2-shift' | awk '$2>0' | sed "s/ /\\t/g" >> {output[vcf_shifted]}
        """

rule apply_genotype_to_fasta:
    conda:
        pipeline_path + "envs/bcftools.yaml"
    input:
        vcf_shifted = "samples/{sample}/typing/freebayes/bwa/{ref}_shifted.vcf.gz",
        vcf_tbi = "samples/{sample}/typing/freebayes/bwa/{ref}_shifted.vcf.gz.tbi",
        ref = "references/{ref}/genome_fasta_trimmed.fasta",
    output:
        fasta = "samples/{sample}/resistance/{ref}/annotated_genes_with_mutations.fasta",
    shell:
        """
        bcftools consensus --include 'type="snp"' --sample {wildcards.sample} --fasta-ref {input[ref]} --output {output[fasta]} {input[vcf_shifted]}
        """

rule extract_mutated_positions:
    conda:
        pipeline_path + "envs/bedtools.yaml"
    input:
        trimmed = "samples/{sample}/resistance/{ref}/annotated_genes_with_mutations.fasta",
        bed = "references/{ref}/{cds}.bed",
    output:
        mutated_pos = "samples/{sample}/resistance/{ref}/mutated_{cds,[a-z]+}.fasta",
    shell:
        """
        rm -f {input[trimmed]}.fai 2> /dev/null
        bedtools getfasta -fi {input[trimmed]} -bed {input[bed]} > {output[mutated_pos]} 2> /dev/null
        """
        
rule extract_reference_positions:
    conda:
        pipeline_path + "envs/bedtools.yaml"
    input:
        trimmed = "references/{ref}/genome_fasta_trimmed.fasta",
        bed = "references/{ref}/{cds}.bed",
    output:
        mutated_pos = "references/{ref}/annotated_{cds,[a-z]+}.fasta",
    shell:
        """
        rm -f {input[trimmed]}.fai 2> /dev/null
        bedtools getfasta -fi {input[trimmed]} -bed {input[bed]} > {output[mutated_pos]} 2> /dev/null
        """

rule format_resistance_results:
    input:
        mutated = "samples/{sample}/resistance/{ref}/mutated_{cds}.fasta",
        ref = "references/{ref}/annotated_{cds}.fasta",
    output:          
        resistance = "samples/{sample}/resistance/{ref}/mutated_{cds,[a-z]+}.tsv",
    shell:
        """
        diff -y {input[ref]} {input[mutated]} | grep "|" -B 1 | grep -v "\-\-" | sed "s/|//" | sed "s/\s>.*$//" | paste - - | tr -d  " " |  tr -s '\\t' '\\t'   > {output[resistance]} || :
        """

rule add_translation_to_mutated_codons:
    conda:
        pipeline_path + "envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        resistance_codons = "samples/{sample}/resistance/{ref}/mutated_codons.tsv",
    output:
        formated_aa = "samples/{sample}/resistance/{ref}/mutated_aa.xlsx",
    script:
        "scripts/add_translation_to_mutated_codons.py"

        
rule format_mutated_nucleotides:
    conda:
        pipeline_path + "envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        resistance_nucleotides = "samples/{sample}/resistance/{ref}/mutated_nucleotides.tsv",
    output:
        formated_nucleotides = "samples/{sample}/resistance/{ref}/mutated_nucleotides.xlsx",
    script:
        "scripts/format_mutated_nucleotides.py"

        
rule merge_mutated_nucleotides_and_codons:
    conda:
        pipeline_path + "envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        formated_aa = "samples/{sample}/resistance/{ref}/mutated_aa.xlsx",
        formated_nucleotides = "samples/{sample}/resistance/{ref}/mutated_nucleotides.xlsx",
        locus_tag = pipeline_path + "data/mycobacterium/db/locus_tags.tsv",
    output:
        resistance = "samples/{sample}/resistance/{ref}/summary.xlsx",
    script:
        "scripts/merge_mutated_nucleotides_and_codons.py"

        
rule merge_non_empty_results:
    conda:
        pipeline_path + "envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        xlsx = expand("samples/{sample}/resistance/{{ref}}/summary.xlsx", sample=read_naming.keys()),
    output:
        summary = "resistance/{ref}_summary.xlsx"
    script:
        "scripts/merge_non_empty_results.py"
