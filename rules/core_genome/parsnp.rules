rule calculate_core_genome_parsnp:
    conda:
        "env/inotify.yaml"
    input:
        "references/all_complete_genomes_log.txt"
    output:
        "core_genome/parsnp/parsnp.xmfa"
    log:
        "core_genome/parsnp/log.txt"
    shell:
        """
        echo "begining" > {output[0]}
        cmd="parsnp -r ! -c -d $(dirname {input[0]})/all_complete_genomes/ -o $(dirname {output[0]})" 
        echo ${{cmd}}
        ${{cmd}} &
        pid=$!
        echo ${{pid}}
        while inotifywait -e close_write {output[0]}
        do
           echo "detected"
           sleep 5
           pstree -p ${{pid}} | grep -o "([0-9]\+)" | grep -o "[0-9]\+"
           pstree -p ${{pid}} | grep -o "([0-9]\+)" | grep -o "[0-9]\+" | xargs -I % kill % || :
        done
        """

rule extract_core_genome_from_ref:
    conda:
        "env/bedtools.yaml"
    input:
        "core_genome/parsnp/parsnp.xmfa",
        "references/{ref}/genome.fasta"
    output:
        "core_genome/{ref}_core_parsnp_sorted.bed",
    shell:
        """
        header=$(head -n 1 {input[1]})
        accession=$(head -n 1 {input[1]} | cut -f1 -d ' ' | sed "s/>//") 
        id=$(grep -B 2 "${{header}}" {input[0]} | head -n 1 | cut -f2 -d' ')
        grep ">${{id}}:[0-9]\+-[0-9]\+" {input[0]} | sed "s/ .*//" | sed "s/-/\\t/" | sed "s/:/\\t/" | sed "s/^>${{id}}/${{accession}}/" |  awk '{{print $1 "\011" $2 "\011" ($3 + 1)}}'> {output[0]}.tmp
        bedtools sort -i {output[0]}.tmp > {output[0]}
        rm {output[0]}.tmp
        """

# we create a bed file from the xmfa file. First we look for the identifier corresponding to the reference used for mapping
# the xmfa indexing starts as 0, as the bed file specifications, however we need to add 1 for the end of the region (done with awk)
