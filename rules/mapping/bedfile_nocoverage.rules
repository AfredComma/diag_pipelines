rule get_total_genome_coverage:
    conda:
        "../../envs/bedtools.yaml"
    input:
        "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam",
    output:
        temp("samples/{sample}/mapping/{mapping_method}/{ref}/genome_coverage.bed")
    shell:
        """
        bedtools genomecov -bga -ibam {input[0]} > {output[0]}
        """


rule get_high_low_regions:
    params:
        min_cov=minimum_coverage
    input:
        "samples/{sample}/mapping/{mapping_method}/{ref}/genome_coverage.bed"
    output:
        temp("samples/{sample}/mapping/{mapping_method}/{ref}/low_genome_coverage.bed")
    shell:
        """
        awk -v min="{params.min_cov}" '{{if($4 < min) {{print}}}}' {input[0]} > {output[0]}
        """

rule get_high_coverage_regions:
    params:
        min_cov=minimum_coverage
    input:
        "samples/{sample}/mapping/{mapping_method}/{ref}/genome_coverage.bed"
    output:
        temp("samples/{sample}/mapping/{mapping_method}/{ref}/high_genome_coverage.bed")
    shell:
        """
        awk -v min="{params.min_cov}" '{{if($4 >= min) {{print}}}}' {input[0]} > {output[0]}
        """

rule union_bedtools_of_pair_of_samples:
    conda:
        "../../envs/bedtools.yaml"
    input:
        bed1="samples/{sample1}/mapping/{mapping_method}/{ref}/high_genome_coverage_sorted_merged.bed",
        bed2="samples/{sample2}/mapping/{mapping_method}/{ref}/high_genome_coverage_sorted_merged.bed",
    output:
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/beds/{sample1}_{sample2}_low_coverage_regions.bed"),
    shell:
        """
        bedtools intersect -a {input[bed1]} -b {input[bed2]} > {output[0]}
        """

rule sort_bed_file:
    conda:
        "../../envs/bedtools.yaml",
    input:
        "{any_bed}.bed"
    output:
        temp("{any_bed}_sorted.bed")
    shell:
        """
        bedtools sort -i {input[0]} > {output[0]}
        """

rule merge_bed_file:
    conda:
        "../../envs/bedtools.yaml",
    input:
        "{any_bed}.bed"
    output:
        temp("{any_bed}_merged.bed")
    shell:
        """
        bedtools merge -i {input[0]} > {output[0]}
        """
