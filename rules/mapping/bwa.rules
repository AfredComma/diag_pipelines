rule map_paired_reads_with_bwa:
    conda:
        "../../envs/bwa-samtools.yaml"
    input:
        "samples/{sample}/reads/trimmed/R1_paired.fastq",
        "samples/{sample}/reads/trimmed/R2_paired.fastq",        
        "references/{ref}/genome_fasta.fasta",
        "references/{ref}/genome_fasta.fasta.bwt",
    output:
        temp("samples/{sample}/mapping/bwa/{ref}.bam"),
    log:
        logging_folder+"/samples/{sample}/logs/mapping/{ref}/bwa/log.txt"
    shell:
        """
        if ls {output[0]}.tmp* 1> /dev/null 2>&1
        then
             rm {output[0]}.tmp*
        fi 
        (bwa mem -R '@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}' {input[2]} {input[0]} {input[1]} -v 1 | samtools sort -O BAM -o {output[0]}) 2> {log}
        """
        
rule map_single_reads_with_bwa:
    conda:
        "../../envs/bwa-samtools.yaml"
    input:
        "samples/{sample}/reads/trimmed/single.fastq",
        ancient("references/{ref}/genome_fasta.fasta"),
        ancient("references/{ref}/genome_fasta.fasta.bwt"),
    output:
        temp("samples/{sample}/mapping/bwa/{ref}.bam"),
    log:
        logging_folder+"/samples/{sample}/logs/mapping/{ref}/bwa/log.txt"
    shell:
        """
        if ls {output[0]}.tmp* 1> /dev/null 2>&1
        then
             rm {output[0]}.tmp*
        fi 
        (bwa mem -R '@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}' {input[1]} {input[0]} -v 1 | samtools sort -O BAM -o {output[0]}) 2> {log}
        """


rule filter_reads_on_quality:
    conda:
        "../../envs/bwa-samtools.yaml"
    input:
        "samples/{sample}/mapping/bwa/{ref}.bam",
        "samples/{sample}/mapping/bwa/{ref}.bam.bai",
        ancient("references/{ref}/genome_fasta.fasta"),
        ancient("references/{ref}/genome_fasta.fasta.bwt"),
    output:
        temp("samples/{sample}/mapping/bwa/{ref}_filtered.bam"),
    shell:
        """
        if ls {output[0]}.tmp* 1> /dev/null 2>&1
        then
            rm {output[0]}.tmp*
        fi 
        samtools view -q 60 -b -u -F 3844 -T {input[2]} {input[0]} | samtools sort -O bam -o {output[0]}
        """
        
rule remove_duplicates_from_mapping:
    conda:
        "../../envs/gatk.yaml"
    input:
        "samples/{sample}/mapping/bwa/{ref}_filtered.bam",
        "samples/{sample}/mapping/bwa/{ref}_filtered.bam.bai",
    output:
        temp("samples/{sample}/mapping/bwa/{ref}_deduplicated_filtered.bam"),
    log:
         logging_folder+"/samples/{sample}/mapping/bwa/{ref}/metrics_deduplicated.txt",
         logging_folder+"/samples/{sample}/logs/mapping/bwa/{ref}/markduplicates.txt"
    shell:
        """
        gatk-launch MarkDuplicates --REMOVE_DUPLICATES true -I {input[0]} -O {output[0]} -M {log[0]} &> {log[1]}
        """

