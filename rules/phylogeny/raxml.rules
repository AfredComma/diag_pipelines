rule compute_phylogeny_with_raxml:
    conda:
        pipeline_path + "envs/raxml.yaml"
    input:
        alignment="typing/{snp_caller}/{core_genome_or_full_genome}/{mapping_method}/alignment.fa"
    output:
        best_tree="phylogeny/{snp_caller}/{core_genome_or_full_genome}/{mapping_method}/normal_run/RAxML_bestTree.nw"
    log:
        logging_folder+"phylogeny/RAxML_log.{core_genome_or_full_genome}"
    shell:
        """
        if [ -d $(dirname {output[best_tree]}) ];
        then
            rm -rf $(dirname {output[best_tree]})
            mkdir -p $(dirname {output[best_tree]})
        fi
        raxmlHPC -V -m GTRCAT -n {wildcards.ref} -s {input[alignment]} -w $(dirname $(readlink -f {output[best_tree]})) -p 123 > {log} 
        cp $(dirname {output[best_tree]})/RAxML_bestTree.{wildcards.ref} $(dirname {output[best_tree]})/RAxML_bestTree.nw 
        """

rule compute_phylogeny_bootstraps_with_raxml:
    conda:
        pipeline_path + "envs/raxml.yaml"
    input:
        "typing/{snp_caller}/{core_genome_or_full_genome}/{mapping_method}/alignment.fa"
    output:
        "phylogeny/{snp_caller}/{core_genome_or_full_genome}/{mapping_method}/bootstrap_run/RAxML_bootstrap.nw"
    log:
        logging_folder+"phylogeny/RAxML_log.{core_genome_or_full_genome}_boot"
    shell:
        """
        if [ -d $(dirname {output[0]}) ];
        then
            rm -rf $(dirname {output[0]})
            mkdir -p $(dirname {output[0]})
        fi
        raxmlHPC -m GTRCAT -V -n {wildcards.ref} -s {input[0]} -b 123 -w $(dirname $(readlink -f {output[0]})) -N 100 -p 123 > {log} 
        cp $(dirname {output[0]})/RAxML_bootstrap.{wildcards.ref} $(dirname {output[0]})/RAxML_bootstrap.nw 
        """

