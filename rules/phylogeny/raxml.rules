rule raxml_on_alignment_to_ref:
    conda:
        "env/raxml.yaml"
    input:
        "alignments/core_{method}/{ref}/{validation}/alignment.fa"
    output:
        "phylogeny/core_{method}/{ref}/{validation}/RAxML_bestTree.nw"
    log:
        "logs/phylogeny/RAxML_log.{ref}"
    shell:
        """
        if ls phylogeny/core_{wildcards.method}/{wildcards.ref}/{wildcards.validation}/RAxML_*.{wildcards.ref} 1> /dev/null 2>&1; then
             rm phylogeny/core_{wildcards.method}/{wildcards.ref}/{wildcards.validation}/*
        fi
        raxmlHPC -V -m GTRCAT -n {wildcards.ref} -s {input[0]} -w $(dirname $(readlink -f {output[0]})) -p 123 > {log} 
        cp phylogeny/core_{wildcards.method}/{wildcards.ref}/{wildcards.validation}/RAxML_bestTree.{wildcards.ref} phylogeny/core_{wildcards.method}/{wildcards.ref}/{wildcards.validation}/RAxML_bestTree.nw
        """

rule raxml_bootstrap:
    conda:
        "env/raxml.yaml"
    input:
        "alignments/{ref}.fa"
    output:
        "phylogeny/RAxML_bootstrap.{ref}_boot"
    log:
        "logs/phylogeny/RAxML_log.{ref}_boot"
    shell:
        """
        if ls phylogeny/RAxML_*.{wildcards.ref}_boot 1> /dev/null 2>&1; then
             rm phylogeny/RAxML_*.{wildcards.ref}_boot
        fi
        raxmlHPC -m GTRGAMMA -V -n {wildcards.ref}_boot -s {input[0]} -b 123 -w $(dirname $(readlink -f {output[0]})) -N 100 -p 123 > {log} 
        """

rule convert_phylogeny_to_image:
    conda:
        "env/newick-utils.yaml"
    input:
        "phylogeny/RAxML_bestTree.{ref}",
        "phylogeny/RAxML_bootstrap.{ref}_boot",
        "phylogeny/label_ids_{ref}.txt"
    output:
        "phylogeny/{ref}.svg"
    shell:
        """
        nw_support {input[0]} {input[1]} | nw_rename - {input[2]} | nw_display -s -b 'opacity:0' -w -1600 -I m -W 20 -v 15 - > {output[0]}
        """
