rule copy_raw_assembly_to_reference_folder:
    input:
        contigs="samples/{sample}/assembly/spades/contigs_500bp_renamed.fasta",
    output:
        fasta=temp("references/{sample}_assembled_genome/genome_fasta.fasta"),
    shell:
        """
        cp {input[contigs]} {output[fasta]}
        """

rule extract_contig_coverage:
    input:
        genome_cov="samples/{sample}/quality/mapping/bwa/{sample}_assembled_genome/qualimap/genome_results.txt"
    output:
        extract="samples/{sample}/quality/contig_coverage.txt"
    shell:
        """
        sed -ne '/Coverage per contig/,$ p'  {input[genome_cov]} | grep contig_ | sed "s/^[ \\t]*//" > {output[extract]}
        """

rule extract_assembly_mean_sd_coverage:
    input:
        genome_cov="samples/{sample}/quality/mapping/bwa/{sample}_assembled_genome/qualimap/genome_results.txt"
    output:
        extract="samples/{sample}/quality/assembly_coverage.txt"
    shell:
        """
        mean=$(grep "mean coverageData" samples/1505151028/quality/mapping/bwa/1505151028_assembled_genome/qualimap/genome_results.txt  | sed 's/[^0-9\.]//g')
        sd=$(grep "mean coverageData" samples/1505151028/quality/mapping/bwa/1505151028_assembled_genome/qualimap/genome_results.txt  | sed 's/[^0-9\.]//g' )
        echo "mean_depth $mean" >  {output[extract]}
        echo "sd_depth $mean" >>  {output[extract]}
        """

rule filter_contigs_on_coverage:
    params:
        cutoff = config["cov_cutoff"]
    input:
        "samples/{sample}/assembly/spades/contigs_500bp_renamed.fasta",
        "samples/{sample}/quality/contig_coverage.txt"
    output:
        "samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_high_coverage.fasta",
        "samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta"
    shell:
        """
        awk '$4 < {params.cutoff}' {input[1]} | cut -f 1 | xargs -I % grep -A 1 "^>%$" {input[0]} > {output[1]}
        awk '$4 > {params.cutoff}' {input[1]} | cut -f 1 | xargs -I % grep -A 1 "^>%$" {input[0]} > {output[0]}
        if [ ! -s {output[0]} ];
        then
            echo "No contigs with coverage higher than {params.cutoff}"
            exit 1
        fi
        """

'''
rule prepare_low_coverage_contigs_report:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        low_depth_contigs = expand('')
        assembly_depth = expand('samples/{sample}/quality/assembly_coverage.txt', sample=reads_naming.keys())
    output:
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
    script:
        "script/report_lowcov_contigs.py"
'''

rule extract_contigs_longer_than_500bp:
    input:
        "samples/{sample}/assembly/spades/contigs.fasta"
    output:
        "samples/{sample}/assembly/spades/contigs_500bp.fasta"
    shell:
        "awk '/^>/{{print (NR==1)?$0: \"\\n\" $0;next}} {{printf \"%s\", $0}}END{{print \"\"}}' {input} |  awk \'!/^>/ {{ next }} {{ getline seq }} length(seq) >= 500 {{ print $0 \"\\n\" seq }}\'  > {output}"  


rule rename_contigs:
    input:
        "samples/{sample}/assembly/spades/contigs_500bp.fasta"
    output:
        "samples/{sample}/assembly/spades/contigs_500bp_renamed.fasta"
    shell:
        "sed \"s/NODE_\\([0-9]\\+\\)_.*/contig_\\1/\" {input} > {output}"

