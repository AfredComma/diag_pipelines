rule trimmomatic_PE:
    conda:
        "env/trim.yaml"
    input:
        ancient("reads/raw/{sample}_R1.fastq.gz"),
        ancient("reads/raw/{sample}_R2.fastq.gz")
    params:
        minlength = config["minimum_read_length"],
        minqual = config["minimum_quality_base"],
        croplength = config["crop_at_read_beginning"]
    output:
        temp("strains/{sample}/reads/trimmed/R1_paired.fastq"),
        temp("strains/{sample}/reads/trimmed/R1_unpaired.fastq"),
        temp("strains/{sample}/reads/trimmed/R2_paired.fastq"),
        temp("strains/{sample}/reads/trimmed/R2_unpaired.fastq"),
        "strains/{sample}/logs/trimmomatic.log"
    log:
        "strains/{sample}/logs/trimmomatic.log"
    shell:
        """
        trimmomatic PE {input[0]} {input[1]} {output[0]} {output[1]} {output[2]} {output[3]} ILLUMINACLIP:${{CONDA_DEFAULT_ENV}}/share/trimmomatic/adapters/TruSeq3-PE.fa:3:25:6 LEADING:{params.minqual} TRAILING:{params.minqual} MINLEN:{params.minlength} HEADCROP:{params.croplength} &> {log}
        """        



rule trimmomatic_SE:
    conda:
        "env/trim.yaml"
    input:
        "reads/raw/{sample}_single.fastq.gz"
    params:
        minlength = config["minimum_read_length"],
        minqual = config["minimum_quality_base"],
        croplength = config["crop_at_read_beginning"]
    output:
        temp("strains/{sample}/reads/trimmed/single.fastq"),
    log:
        "strains/{sample}/logs/trimmomatic.log"
    shell:
        """
        trimmomatic SE {input[0]} {output[0]} ILLUMINACLIP:${{CONDA_DEFAULT_ENV}}/share/trimmomatic/adapters/TruSeq3-PE.fa:3:25:6 LEADING:{params.minqual} TRAILING:{params.minqual} MINLEN:{params.minlength} HEADCROP:{params.croplength} &> {log}
        """
