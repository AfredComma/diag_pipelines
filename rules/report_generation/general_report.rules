#!/usr/bin/env python

import itertools

# add options in config file?
# core genome vs complete genome
# one strain as reference?
# spanning_tree_all="typing/gatk_gvcfs/full_genome_33148/bwa/distances_in_snp_mst_with_st.svg",
# spanning_tree_st152 ="typing/gatk_gvcfs/full_genome_1411181071_assembled_genome/bwa/distances_in_snp_mst_with_st.svg"

# TODO: add expand function to have multiple possible reference genomes
# need further checks for parsnp core genomes. Add it as option?
rule report_epidemiology_virulence_resistance_saureus:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        ete_figure = "report/figures/virulence_staph.svg",
        ete_figure_counts = "report/figures/virulence_counts.svg",
        virulence_reports = expand("report/virulence/{sample}_VFDB_report.html", sample=read_naming.keys()),
        blast_results = expand("samples/{sample}/virulence/VFDB_results_blast.tsv", sample=read_naming.keys()),
        spanning_tree_core = expand("report/figures/%s/{reference}/bwa/distances_in_snp_mst_with_st.svg" % config["snp_caller"], reference=reference_genomes),
        mlst_tree = "report/figures/mlst_tree.svg",
        resistance_reports = expand("report/resistance/{sample}_rgi_report.html", sample=read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
        snp_tables = expand("typing/%s/{reference}/bwa/distances_in_snp.tsv" % config["snp_caller"], reference=reference_genomes),
        reference_genome = expand("references/%s/genome_fasta.fasta", reference=reference_genomes),
        core_genome_bed = "core_genomes/%s/" % config["reference"] + species + ".bed",
        mlst = 'typing/mlst/summary.tsv',
    params:
        samples = list(read_naming.keys()),
        sample_table = config["local_samples"]
    output:
        "report/report_epidemiology_virulence_resistance_saureus.html",
    script:
        "scripts/report_epidemiology_virulence_resistance_saureus.py"


# only ok for cgMLST core genomes
# need further checks for parsnp core genomes
def get_undetermined_file_list(sample_list, reference_genomes, snp_caller, mapping_method):
    import itertools
    pairs = list(itertools.product(sample_list, reference_genomes))
    all_outputs = []
    for pair in pairs:
        all_outputs.append("samples/%s/snps/%s/%s/%s/unknowns.tab" % (pair[0], snp_caller, pair[1], mapping_method))
    return all_outputs

def check_if_cgMLST():
    if 'cgMLST' in reference_genomes:
        return "core_genomes/cgMLST/" + species + ".bed"
    else:
        return None


def get_snps_file_list(sample_list, reference_genomes, snp_caller, mapping_method):
    print("get table list")
    pairs = list(itertools.product(reference_genomes, sample_list))
    print(pairs)
    all_outputs = []
    for pair in pairs:
        pair = list(pair)
        # if among local/sra sample, reference is an assembled genome
        if pair[0] in read_naming.keys():
            pair[0] = pair[0]+'_assembled_genome'
        # "report/snps/{reference}/{mapping_method}/{snp_caller}/{sample}.html"
        path = "report/snps/%s/%s/%s/%s.html" % (pair[0], mapping_method, snp_caller, pair[1])
        all_outputs.append(path)
    return all_outputs


def get_indel_file_list(sample_list, reference_genomes, mapping_method):
    "report/indel/79781/bwa/TATRas-control.html"
    pairs = list(itertools.product(reference_genomes, sample_list))
    all_outputs = []
    for pair in pairs:
        pair = list(pair)
        if pair[0] == 'cgMLST':
            continue
        path = "report/indel/%s/%s/%s.html" % (pair[0], mapping_method, pair[1])
        all_outputs.append(path)
    return all_outputs

'''
- we have to replace cgMLST by the actual genome if to get the right multiqc report (otherwise the pipeline will compute the whole analysis on the linked fasta cgMLST file)
'''
rule report_epidemiology_assembly:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_assembly = "report/multiqc_assembly/multiqc_report.html",
        multiqc_mapping_list = expand("report/multiqc_mapping_to_{reference}/bwa/multiqc_report.html", reference=[i for i in reference_genomes_dir if i != "cgMLST"] + [str(all_core_genome_dbs.loc[species, "ReferenceGenome"])]),
        spanning_trees = expand("report/figures/%s/{reference}/bwa/distances_in_snp_mst_with_st.svg" % config["snp_caller"], reference=reference_genomes),
        #mlst_tree = "report/figures/mlst_tree.svg", ## TODO one tree for each reference genome
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered_bwa/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
        snp_tables = expand("typing/%s/{reference}/bwa/distances_in_snp.tsv" % config["snp_caller"], reference=reference_genomes),
        reference_genomes = expand("references/{reference}/genome_fasta.fasta", reference=reference_genomes_dir),
        mlst = 'typing/mlst/summary.tsv',
        undetermined_positions = get_undetermined_file_list(read_naming.keys(), reference_genomes, config["snp_caller"], config["mapping"]),
        contig_gc_depth_files = expand("samples/{sample}/quality/mapping/bwa/{sample}_assembled_genome/contig_gc_depth_500bp_high_coverage.tab", sample=read_naming.keys()),
        snps_reports = get_snps_file_list(read_naming.keys(), ref_list, config["snp_caller"],config["mapping"]),
        indel_reports = get_indel_file_list(read_naming.keys(), reference_genomes_dir, config["mapping"])
    params:
        core_genome_bed = check_if_cgMLST(),
        samples = list(read_naming.keys()),
        sample_table = config["local_samples"]
    output:
        "report/report_epidemiology_assembly.html",
    script:
        "scripts/report_epidemiology.py"

rule report_epidemiology:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_mapping_list = expand("report/multiqc_mapping_to_{reference}/%s/multiqc_report.html" % config["mapping"], reference=[i for i in reference_genomes_dir if i != "cgMLST"] + [str(all_core_genome_dbs.loc[species, "ReferenceGenome"])]),
        spanning_trees = expand("report/figures/%s/{reference}/%s/distances_in_snp_mst_no_st.svg" % (config["snp_caller"], config["mapping"]), reference=reference_genomes),
        #mlst_tree = "report/figures/mlst_tree.svg", ## TODO one tree for each reference genome
        snp_tables = expand("typing/%s/{reference}/%s/distances_in_snp.tsv" % (config["snp_caller"], config["mapping"]), reference=reference_genomes),
        reference_genomes = expand("references/{reference}/genome_fasta.fasta", reference=reference_genomes_dir),
        #mlst = 'typing/mlst/summary.tsv',
        undetermined_positions = get_undetermined_file_list(read_naming.keys(), reference_genomes, config["snp_caller"], config["mapping"]),
        snps_reports = get_snps_file_list(read_naming.keys(), ref_list, config["snp_caller"], config["mapping"]),
        indel_reports = get_indel_file_list(read_naming.keys(), reference_genomes_dir, config["mapping"]),
        mash_results = expand('samples/{sample}/contamination/mash/fastq/distances_formated_no_virus.tsv', sample=read_naming.keys())
    params:
        core_genome_bed = check_if_cgMLST(),
        samples = list(read_naming.keys()),
        sample_table = config["local_samples"]
    output:
        "report/report_epidemiology.html",
    script:
        "scripts/report_epidemiology.py"

# only ok for cgMLST core genomes
# need further checks for parsnp core genomes
rule report_epidemiology_virulence_resistance:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        ete_figure_counts = "report/figures/virulence_counts.svg",
        virulence_reports = expand("report/virulence/{sample}_VFDB_report.html", sample=read_naming.keys()),
        blast_results = expand("samples/{sample}/virulence/VFDB_results_blast.tsv", sample=read_naming.keys()),
        spanning_tree_core = expand("report/figures/%s/{reference}/bwa/distances_in_snp_mst_with_st.svg" % config["snp_caller"], reference=reference_genomes),
        mlst_tree="report/figures/mlst_tree.svg",
        resistance_reports = expand("report/resistance/{sample}_rgi_report.html", sample=read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
        snp_table = expand("typing/%s/{reference}/bwa/distances_in_snp.tsv" % config["snp_caller"], reference=reference_genomes),
        reference_genome = expand("references/{reference}/genome_fasta.fasta", reference=reference_genomes),
        core_genome_bed = expand("core_genomes/{reference}/" + species + ".bed", reference=reference_genomes),
        mlst = 'typing/mlst/summary.tsv',
    params:
        samples = list(read_naming.keys()),
    output:
        "report/report_epidemiology_virulence_resistance.html",
    script:
        "scripts/report_epidemiology_virulence_resistance.py"

# todo: donwload assemblies of a given taxon and build core genome phylogeny
rule report_strain_characterization:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        virulence_reports = expand("report/virulence/{sample}_VFDB_report.html", sample=read_naming.keys()),
        blast_results = expand("samples/{sample}/virulence/VFDB_results_blast.tsv", sample = read_naming.keys()),
        resistance_reports = expand("report/resistance/{sample}_rgi_report.html", sample=read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
    params:
        samples = list(read_naming.keys()),
    output:
        "report/report_strain_characterization.html",
    script:
        "scripts/report_strain_characterization.py"

# todo: add heatmaps overview
rule report_resistance:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        qualimap_reports = expand("report/qualimap/{sample}/bwa/{sample}_assembled_genome/qualimapReport.html", sample=read_naming.keys()),
        multiqc_assembly = "report/multiqc_assembly/multiqc_report.html",
        resistance_reports = expand("report/resistance/{sample}_rgi_report.html", sample=read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered_bwa/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
        high_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered_bwa/contigs_500bp_high_coverage.fasta", sample=read_naming.keys()),
        contig_gc_depth_file_list = expand("samples/{sample}/quality/mapping/bwa/{sample}_assembled_genome/contig_gc_depth_500bp_high_coverage.tab", sample=read_naming.keys()),
        rgi_overview = "report/resistance/rgi_overview.svg",
        mash_results = expand('samples/{sample}/contamination/mash/assembly/distances_formated_no_virus.tsv', sample=read_naming.keys()),
        low_cov_detail = expand("report/contamination/low_coverage_contigs/{sample}.html", sample=read_naming.keys()),
        mash_detail = expand("report/contamination/mash/assembly/{sample}.html", sample=read_naming.keys()),
    params:
        samples = list(read_naming.keys()),
        sample_table = config["local_samples"]
    output:
        "report/report_resistance.html",
    script:
        "scripts/report_resistance.py"

# todo: build phylogeny from a set of core markers?
rule report_virulence:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        qualimap_reports = expand("report/qualimap/{sample}/bwa/{sample}_assembled_genome/qualimapReport.html", sample=read_naming.keys()),
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        virulence_reports = expand("report/virulence/{sample}_VFDB_report.html", sample=read_naming.keys()),
        blast_results=expand("samples/{sample}/virulence/VFDB_results_blast.tsv", sample = read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
    params:
        samples = list(read_naming.keys()),
    output:
        "report/report_virulence.html",
    script:
        "scripts/report_virulence.py"
