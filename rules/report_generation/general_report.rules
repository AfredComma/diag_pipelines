#!/usr/bin/env python

# add options in config file?
# core genome vs complete genome
# one strain as reference?
# spanning_tree_all="typing/gatk_gvcfs/full_genome_33148/bwa/distances_in_snp_mst_with_st.svg",
# spanning_tree_st152 ="typing/gatk_gvcfs/full_genome_1411181071_assembled_genome/bwa/distances_in_snp_mst_with_st.svg"

# only ok for cgMLST core genomes
# need further checks for parsnp core genomes. Add it as option?
rule report_epidemiology_virulence_resistance_saureus:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        ete_figure = "report/figures/virulence_staph.svg",
        ete_figure_counts = "report/figures/virulence_counts.svg",
        virulence_reports = expand("report/virulence/{sample}_VFDB_report.html", sample=read_naming.keys()),
        blast_results=expand("samples/{sample}/virulence/VFDB_results_blast.tsv", sample = read_naming.keys()),
        spanning_tree_core="report/figures/gatk_gvcfs/cgMLST/bwa/distances_in_snp_mst_with_st.svg",
        mlst_tree="report/figures/mlst_tree.svg",
        resistance_reports = expand("report/resistance/{sample}_rgi_report.html", sample=read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
        snp_table = "typing/gatk_gvcfs/cgMLST/bwa/distances_in_snp.tsv",
        reference_genome = "references/cgMLST/genome_fasta.fasta",
        core_genome_bed = "core_genomes/cgMLST/" + species + ".bed",
        mlst='typing/mlst/summary.tsv',
    params:
        samples = list(read_naming.keys()),
    output:
        "report/report_epidemiology_virulence_resistance_saureus.html",
    script:
        "scripts/report_epidemiology_virulence_resistance_saureus.py"

# only ok for cgMLST core genomes
# need further checks for parsnp core genomes
rule report_epidemiology:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        spanning_tree_core="report/figures/gatk_gvcfs/cgMLST/bwa/distances_in_snp_mst_with_st.svg",
        mlst_tree="report/figures/mlst_tree.svg",
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
        snp_table = "typing/gatk_gvcfs/cgMLST/bwa/distances_in_snp.tsv",
        reference_genome = "references/cgMLST/genome_fasta.fasta",
        core_genome_bed = "core_genomes/cgMLST/" + species + ".bed",
        mlst='typing/mlst/summary.tsv',
    params:
        samples = list(read_naming.keys()),
    output:
        "report/report_epidemiology.html",
    script:
        "scripts/report_epidemiology.py"

# only ok for cgMLST core genomes
# need further checks for parsnp core genomes
rule report_epidemiology_virulence_resistance:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        ete_figure_counts = "report/figures/virulence_counts.svg",
        virulence_reports = expand("report/virulence/{sample}_VFDB_report.html", sample=read_naming.keys()),
        blast_results=expand("samples/{sample}/virulence/VFDB_results_blast.tsv", sample = read_naming.keys()),
        spanning_tree_core="report/figures/gatk_gvcfs/cgMLST/bwa/distances_in_snp_mst_with_st.svg",
        mlst_tree="report/figures/mlst_tree.svg",
        resistance_reports = expand("report/resistance/{sample}_rgi_report.html", sample=read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
        snp_table = "typing/gatk_gvcfs/cgMLST/bwa/distances_in_snp.tsv",
        reference_genome = "references/cgMLST/genome_fasta.fasta",
        core_genome_bed = "core_genomes/cgMLST/" + species + ".bed",
        mlst='typing/mlst/summary.tsv',
    params:
        samples = list(read_naming.keys()),
    output:
        "report/report_epidemiology_virulence_resistance.html",
    script:
        "scripts/report_epidemiology_virulence_resistance.py"

# todo: donwload assemblies of a given taxon and build core genome phylogeny
rule report_strain_characterization:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        virulence_reports = expand("report/virulence/{sample}_VFDB_report.html", sample=read_naming.keys()),
        blast_results=expand("samples/{sample}/virulence/VFDB_results_blast.tsv", sample = read_naming.keys()),
        resistance_reports = expand("report/resistance/{sample}_rgi_report.html", sample=read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
    params:
        samples = list(read_naming.keys()),
    output:
        "report/report_strain_characterization.html",
    script:
        "scripts/report_strain_characterization.py"

# todo: add heatmaps overview
rule report_resistance:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        resistance_reports = expand("report/resistance/{sample}_rgi_report.html", sample=read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
    params:
        samples = list(read_naming.keys()),
    output:
        "report/report_resistance.html",
    script:
        "scripts/report_resistance.py"

# todo: build phylogeny from a set of core markers?
rule report_virulence:
    conda:
        pipeline_path + "envs/report.yml"
    input:
        qualimap_reports = expand("report/qualimap/{sample}/bwa/{sample}_assembled_genome/qualimapReport.html", sample=read_naming.keys()),
        multiqc_report = "report/multiqc_assembly/multiqc_report.html",
        virulence_reports = expand("report/virulence/{sample}_VFDB_report.html", sample=read_naming.keys()),
        blast_results=expand("samples/{sample}/virulence/VFDB_results_blast.tsv", sample = read_naming.keys()),
        low_cov_fastas = expand("samples/{sample}/assembly/spades/coverage_filtered/contigs_500bp_low_coverage.fasta", sample=read_naming.keys()),
    params:
        samples = list(read_naming.keys()),
    output:
        "report/report_virulence.html",
    script:
        "scripts/report_virulence.py"