rule call_variants_freebayes_vcf_one_sample:
    conda:
        "../../envs/freebayes.yaml"
    input:
        "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam",
        "references/{ref}/genome_fasta.fasta",
        "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bai",
    output:
        "samples/{sample}/snps/freebayes/{ref}/{mapping_method}/snps.vcf",
    shell:
        """
        freebayes --min-coverage 0 --min-alternate-count 2 --ploidy 1 --min-alternate-fraction 0.50 --min-base-quality 20 -f {input[1]} {input[0]} > {output[0]}
        """

    
rule call_variants_freebayes_vcf_all_samples:
    threads: 4
    conda:
        "../../envs/freebayes.yaml"
    input:
        bams=expand("samples/{sample}/mapping/{{mapping_method}}/{{ref}}/deduplicated_filtered.bam", sample=read_naming.keys()),
        ref=ancient("references/{ref}/genome_fasta.fasta"),
        ref_fai=ancient("references/{ref}/genome_fasta.fasta.fai"),
        bais=expand("samples/{sample}/mapping/{{mapping_method}}/{{ref}}/deduplicated_filtered.bai", sample=read_naming.keys()),
    output:
        "typing/freebayes_joint_genotyping/core_parsnp/{ref}/{mapping_method}/raw/all_samples.vcf"
    shell:
        """
        freebayes-parallel <(fasta_generate_regions.py {input[ref_fai]} 100000) {threads}  --min-coverage 0 --min-alternate-count 2 --ploidy 1 --min-alternate-fraction 0.750 --min-base-quality 20 -f {input[ref]} {input[bams]} > {output[0]} 2>> /dev/null
        """
