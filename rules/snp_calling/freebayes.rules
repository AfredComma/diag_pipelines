rule call_variants_freebayes_vcf_one_sample:
    params:
        min_cov=minimum_coverage,
        min_alt=minimum_alternate_frac
    conda:
        "../../envs/freebayes.yaml"
    input:
        "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam",
        "references/{ref}/genome_fasta.fasta",
        "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam.bai",
    output:
        "samples/{sample}/snps/freebayes/{ref}/{mapping_method}/snps.vcf",
    shell:
        """
        freebayes --min-coverage {params.min_cov} --ploidy 1 --min-alternate-fraction {min_alternate_frac} --min-base-quality 20 -f {input[1]} {input[0]} > {output[0]}
        """

    
rule call_variants_freebayes_vcf_all_samples:
    threads: 4
    params:
        min_cov=minimum_coverage,
        min_alt=minimum_alternate_frac,
    conda:
        "../../envs/freebayes.yaml"
    input:
        bams=expand("samples/{sample}/mapping/{{mapping_method}}/{{ref}}/deduplicated_filtered.bam", sample=read_naming.keys()),
        ref=ancient("references/{ref}/genome_fasta.fasta"),
        ref_fai=ancient("references/{ref}/genome_fasta.fasta.fai"),
        bais=expand("samples/{sample}/mapping/{{mapping_method}}/{{ref}}/deduplicated_filtered.bam.bai", sample=read_naming.keys()),
    output:
        vcf="typing/freebayes_joint_genotyping/full_genome/{ref}/{mapping_method}/raw/all_samples.vcf"
    log:
        logging_folder+"/logs/freebayes_joint_genotyping/all_samples.txt"
    shell:
        """
        freebayes-parallel <(fasta_generate_regions.py {input[ref_fai]} 100000) {threads}  --min-coverage {params.min_cov} --ploidy 1 --min-alternate-fraction {params.min_alt} --min-base-quality 20 -f {input[ref]} {input[bams]}  > {output[vcf]} 2> {log}
        """
