rule create_dict_for_reference:
    conda:
        "../../envs/gatk.yaml"
    input:
        "references/{ref}/genome_fasta.fasta"
    output:
        "references/{ref}/genome_fasta.dict"
    log:
        logging_folder+"/logs/references/{ref}/create_dictionnary.txt"
    shell:
        """
        samtools faidx {input[0]}
        gatk-launch CreateSequenceDictionary -R {input[0]} &> {log}
        """

rule haplotype_caller_vcf:
    conda:
        "../../envs/gatk.yaml"
    input:
        "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam",
        "references/{ref}/genome_fasta.fasta",
        "references/{ref}/genome_fasta.dict",
        "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam.bai",
    output:
        "samples/{sample}/snps/gatk/{ref}/{mapping_method}/snps.vcf",
        temp("samples/{sample}/mapping/{mapping_method}/{ref}/gatk-haplotypecaller.bam"),
    log:
        logging_folder+"/samples/{sample}/logs/snps/gatk/haplotypecaller.txt",
    shell:
        """
        gatk-launch HaplotypeCaller -ploidy 1 -output {output[0]} --input {input[0]} --reference {input[1]} --bam-output {output[1]} &> {log[0]}
        """
        
rule haplotype_caller_gvcf:
    conda:
        "../../envs/gatk.yaml"
    input:
        "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam",
        "references/{ref}/genome_fasta.fasta",
        "references/{ref}/genome_fasta.dict",
        "samples/{sample}/mapping/{mapping_method}/{ref}/deduplicated_filtered.bam.bai",
    output:
        temp("samples/{sample}/snps/gatk/{ref}/{mapping_method}/snps.g.vcf"),
        temp("samples/{sample}/snps/gatk/{ref}/{mapping_method}/snps.g.vcf.idx"),
    log:
        logging_folder+"/samples/{sample}/logs/snps/gatk/haplotypecaller_gvcf.txt",
    shell:
        """
        gatk-launch HaplotypeCaller -ploidy 1 --output {output[0]} --input {input[0]} --reference {input[1]} -ERC BP_RESOLUTION &> {log[0]}
        """

rule merge_gvcf_files:
    conda:
        "../../envs/gatk.yaml"
    input:
        ref="references/{ref}/genome_fasta.fasta",
        gvcfs=expand("samples/{sample}/snps/gatk/{{ref}}/{{mapping_method}}/snps.g.vcf.gz", sample=read_naming.keys()),
        gvcfs_tbi=expand("samples/{sample}/snps/gatk/{{ref}}/{{mapping_method}}/snps.g.vcf.gz.tbi", sample=read_naming.keys())
    output:
        "typing/gatk_gvcfs/full_genome/{ref}/{mapping_method}/genomics_db/vcfheader.vcf"
    log:
        logging_folder+"/logs/gatk_gvcfs/core_parsnp/{ref}/{mapping_method}/merge_gvcf.txt",
    shell:
        """
        if [ -d $(dirname {output[0]}) ]; then
            rm -rf $(dirname {output[0]})
        fi
        acc=$(grep ">" {input[ref]} | sed "s/ .*//" | sed "s/>//")
        var=$(echo {input[gvcfs]} | sed "s/ / -V /g")
        gatk-launch GenomicsDBImport --genomicsdb-workspace-path  $(dirname {output[0]}) -V ${{var}} --intervals ${{acc}} &> {log}
        """

rule gatk_joint_genotyping_on_gvcf_files:
    conda:
        "../../envs/gatk.yaml"
    input:
        "references/{ref}/genome_fasta.fasta",
        "typing/gatk_gvcfs/full_genome/{ref}/{mapping_method}/genomics_db/vcfheader.vcf"
    output:
        "typing/gatk_gvcfs/full_genome/{ref}/{mapping_method}/all_samples.vcf",
    log:
        logging_folder+"/logs/gatk_gvcfs/core_parsnp/{ref}/{mapping_method}/merge_gvcf.txt",
    shell:
        """
        gatk-launch GenotypeGVCFs -ploidy 1 -R {input[0]} --annotate-with-num-discovered-alleles true --annotations-to-exclude InbreedingCoeff -V gendb://$(dirname {input[1]}) -O {output[0]} &> {log}
        """

        

        

    

        

        
    
