rule get_total_genome_coverage:
    conda:
        "env/bedtools.yaml"
    input:
        "strains/{sample}/mapping/bwa/{ref}/before_validation/{sample}/snps_deduplicated.bam",
    output:
        "strains/{sample}/mapping/{mapping_method}/{ref}/before_validation/genome_coverage.bed"
    shell:
        """
        bedtools genomecov -bga -ibam {input[0]} > {output[0]}
        """


rule filter_genome_coverage:
    input:
        "strains/{sample}/mapping/{mapping_method}/{ref}/before_validation/genome_coverage.bed",
        "strains/{sample}/quality/mapping/bwa/{ref}/min_cov.txt",
        "strains/{sample}/quality/mapping/bwa/{ref}/max_cov.txt"
    output:
        "strains/{sample}/mapping/{mapping_method}/{ref}/before_validation/genome_coverage_filtered.bed"
    shell:
        """
        min=10
        max=$(cat {input[2]})
        echo ${{min}} ${{max}}
        
        awk -v min="${{min}}" -v max="${{max}}" '{{if (( $4 < min ) || ( $4 > max )) {{print}}}}' {input[0]} > {output[0]}
        """


rule intersect_filter_genome_coverage:
    conda:
        "env/bedtools.yaml"
    input:
        "core_genome/{ref}_core_parsnp_sorted_withdot.bed",
        "strains/{sample}/mapping/{mapping_method}/{ref}/before_validation/genome_coverage_filtered.bed"
    output:
        "strains/{sample}/mapping/{mapping_method}/{ref}/before_validation/genome_coverage_filtered_intersect_parsnp.bed"
    shell:
        """
        bedtools intersect -a {input[0]} -b {input[1]}  > {output[0]}.tmp
        bedtools sort -i {output[0]}.tmp > {output[0]}.tmp.tmp
        bedtools merge  -i {output[0]}.tmp.tmp > {output[0]}
        rm {output[0]}.tmp*
        """


        
rule call_consensus_sequence:
    conda:
        "env/bcftools.yaml"
    input:
        "references/{ref}/genome.fasta",
        "strains/{sample}/mapping/{mapping_method}/{ref}/before_validation/genome_coverage_filtered_intersect_parsnp.bed",
        "strains/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/before_validation/merged_mnp_decomposed_to_snp_core_parsnp.vcf.gz",
    output:
        "strains/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/before_validation/consensus.fasta"
    shell:
        """
        bcftools consensus --fasta-ref {input[0]} --mask {input[1]} {input[2]} -o {output[0]} --sample {wildcards.sample}
        sed -i "s/>.*/>{wildcards.sample}/" {output[0]} 
        """




rule merge_fasta_sequences:
    input:
        "references/{ref}/genome.fasta",
        expand("strains/{sample}/snps/{{snp_caller}}/{{ref}}/{{mapping_method}}/before_validation/consensus.fasta", sample=read_naming.keys())
    output:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/before_validation/full_alignment.fasta",
    shell:
        """
        cat {input} > {output[0]}
        """


rule get_vcf_from_alignment_file:
    conda:
        "env/snp-sites.yaml"
    input:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/before_validation/full_alignment.fasta",
    output:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/before_validation/full_alignment.vcf",
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/before_validation/full_alignment.vcf.gz",
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/before_validation/full_alignment.vcf.gz.tbi",
    shell:
        """
        snp-sites -v {input[0]} -o {output[0]}
        id=$(grep "#CHROM" {output[0]} | cut -f 10)
        sed -i "s/^1/${{id}}/" {output[0]}
        bgzip -c {output[0]} > {output[1]}
        tabix -f -p vcf {output[1]}
        """


rule extract_genotype_info_from_full_alignment:
    conda:
        "env/bcftools.yaml"
    input:
        "typing/{snp_caller}/core_{method}/{ref}/{mapping_method}/{validation}/full_alignment.vcf.gz"
    output:
        "typing/{snp_caller}/core_{method}/{ref}/{mapping_method}/{validation}/full_alignment_genotype.GT.FORMAT",
    shell:
        """
        bcftools query -H -f "%CHROM\\t%POS\\t%REF\\t%ALT[\\t%GT]\n" {input[0]}  > {output[0]}
        """
        

        
rule snp_distance_from_masked_vcf:
    conda:
        "env/pandas-biopython-pysam.yaml"
    params:
        samples=list(read_naming.keys()),
        dist_thre=int(config["snps_distance_threshold"])
    input:
        gbk="references/{ref}/genome.gbk",
        genotype="typing/{snp_caller}/core_{method}/{ref}/{mapping_method}/{validation}/full_alignment_genotype.GT.FORMAT",
        bams=expand("strains/{sample}/mapping/{{mapping_method}}/{{ref}}/before_validation/{sample}/snps_deduplicated.bam", sample=read_naming.keys())
    output:
        out_csv_dist="typing/{snp_caller}/core_{method}/{ref}/{mapping_method}/{validation}/soft_masked/distance.csv",
        out_csv_pos="typing/{snp_caller}/core_{method}/{ref}/{mapping_method}/{validation}/soft_masked/positions.csv",
        out_xlsx_dist="typing/{snp_caller}/core_{method}/{ref}/{mapping_method}/{validation}/soft_masked/distance.xlsx",
        out_xlsx_pos="typing/{snp_caller}/core_{method}/{ref}/{mapping_method}/{validation}/soft_masked/positions.xlsx",
    script:
        "scripts/snp_distance_from_masked_vcf.py"
