rule distance_columns_to_matrix:
    params:
        samples=list(read_naming.keys())
    conda:
        "../../envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        "typing/{snp_caller}/{core_genome_or_full_genome}/{ref}/{mapping_method}/{distance_type}.txt",
#        "quality/multiqc/mapping_to_{ref}/multiqc_report.html",
    output:
        out_xlsx_distance="typing/{snp_caller}/{core_genome_or_full_genome}/{ref}/{mapping_method}/{distance_type}.xlsx",
        out_tsv_distance="typing/{snp_caller}/{core_genome_or_full_genome}/{ref}/{mapping_method}/{distance_type}.tsv"
    script:
        "scripts/distance_columns_to_matrix.py"

        
rule compute_minimum_spanning_tree_with_st:
    params:
        threshold=config["snp_threshold"]
    conda:
        "../../envs/igraph.yaml"
    input:
        "typing/{snp_caller}/{core_genome_or_full_genome}/{ref}/{mapping_method}/{distance_type}.tsv",
        "typing/mlst/summary.tsv",
        "references/{ref}/mlst.tsv",
        "references/{ref}/genome_subvalue.txt",
    output:
        "typing/{snp_caller}/{core_genome_or_full_genome}/{ref}/{mapping_method}/{distance_type}_mst_with_st.svg"
    log:
        logging_folder+"/logs/typing/{snp_caller}/{core_genome_or_full_genome}/{ref}/{mapping_method}/{distance_type}_mst_with_st.txt"
    script:
        "scripts/minimum_spanning_tree_with_st.R"

        
rule compute_minimum_spanning_tree_no_st:
    params:
        threshold=config["snp_threshold"]
    conda:
        "../../envs/igraph.yaml"
    input:
        dist="typing/{snp_caller}/{core_genome_or_full_genome}/{ref}/{mapping_method}/{distance_type}.tsv",
        subvalue="references/{ref}/genome_subvalue.txt",
    output:
        "typing/{snp_caller}/{core_genome_or_full_genome}/{ref}/{mapping_method}/{distance_type}_mst_no_st.svg"
    log:
        logging_folder+"/logs/typing/{snp_caller}/{core_genome_or_full_genome}/{ref}/{mapping_method}/{distance_type}_mst_no_st.txt"
    script:
        "scripts/minimum_spanning_tree_no_st.R"

        
        
rule merge_snps_distance_xlsx:
    conda:
        "../../envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        expand("typing/core_{{method}}/{ref}/distance.xlsx", ref = ref_ids_for_mapping)
    output:
        "typing/core_{method}/summary.xlsx"
    script:
        "scripts/merge_typing_xlsx.py"


        
rule calculate_number_of_differences_from_alignment:
    conda:
        "../../envs/pandas-openpyxl-pronto-xlrd.yaml"
    input:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/alignment.fa"
    output:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/distances_from_alignment.txt"
    script:
        "scripts/calculate_distances_from_alignment.py"
