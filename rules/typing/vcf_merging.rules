rule merge_vcf_pairs:
    conda:
        "env/vt-bcftools.yaml"
    input:
        "strains/{sample1}/snps/{snp_caller}/{ref}/{mapping_method}/{sample1}.vcf.gz",
        "strains/{sample2}/snps/{snp_caller}/{ref}/{mapping_method}/{sample2}.vcf.gz",
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/beds/{sample1}_{sample2}_low_coverage_regions.bed",        
    output:
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/{sample1}_{sample2}.vcf.gz"),
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/{sample1}_{sample2}.vcf.gz.tbi"),
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/{sample1}_{sample2}.vcf"),
    shell:
        """
        bcftools merge {input[0]} {input[1]} -0 -O v > {output[2]}
        bgzip -c {output[2]} > {output[0]}
        tabix -f -p vcf {output[0]}
        """

rule merge_all_vcfs_no_indels:
    conda:
        "env/vt-bcftools.yaml"
    input:
        vcfs=expand("strains/{sample}/snps/freebayes/{{ref}}/{{mapping_method}}/{sample}.vcf.gz", sample=read_naming.keys())
    output:
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/merged.vcf.gz"),
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/merged.vcf.gz.tbi"),
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/merged.vcf"),
    shell:
        """
        bcftools merge -f PASS,hicov,lowcov,freq -0 -O v {input[vcfs]} > {output[2]}
        bgzip -c {output[2]} > {output[0]}
        tabix -f -p vcf {output[0]}
        """
        


