rule query_AD_for_sample:
    conda:
        "../../envs/vt-bcftools.yaml",
    input:
        vcf_sample="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/raw.vcf.gz",
        vcf_sample_tbi="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/raw.vcf.gz.tbi",
    output:
        ad_pos_vcf=temp("samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/ad_pos.vcf"),
        ad_values_vcf=temp("samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/ad_values.vcf"),
    shell:
        """
        bcftools query -f "%CHROM %POS\\n" {input[vcf_sample]} > {output[ad_pos_vcf]}
        bcftools query -f "[%AD]\\n" {input[vcf_sample]} > {output[ad_values_vcf]}
        """

rule create_header_for_new_entry:
    output:
        misc=temp("typing/misc/header_AM.txt")
    shell:
        """
        echo '##FORMAT=<ID=AM,Number=1,Type=Integer,Description="Maximum number of observation for any allele">' > {output[misc]}
        """

rule select_AM_for_sample:
    input:
        ad_vcf="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/ad_values.vcf",      
    output:
        am_vcf=temp("samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/am.vcf"),      
    run:
        with open(output["am_vcf"], "w") as outfile:
            for line in open(input["ad_vcf"], "r").read().splitlines():
                if line ==".":
                    outfile.write(".\n")
                else:
                    outfile.write(str(max([int(x) for x in line.split(",")]))+"\n")


rule merge_pos_AM_for_sample:
    input:
        am_vcf="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/am.vcf",
        ad_pos_vcf="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/ad_pos.vcf",
    output:
        annotation=temp("samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/annotation.vcf")
    shell:
        """
        paste {input[ad_pos_vcf]} {input[am_vcf]} | sed "s/ /\\t/" > {output[annotation]}
        """

rule add_annotation_to_sample:
    conda:
        "../../envs/vt-bcftools.yaml",
    input:
        annotation="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/annotation.vcf.gz",
        annotation_tbi="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/annotation.vcf.gz.tbi",
        header="typing/misc/header_AM.txt",
        vcf_sample="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/raw.vcf.gz",
        vcf_sample_tbi="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/raw.vcf.gz.tbi",
    output:
        vcf_sample="samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/annotated_am.vcf",
    shell:
        """
        bcftools annotate {input[vcf_sample]} --annotations {input[annotation]} -c CHROM,POS,FORMAT/AM --header-lines {input[header]} > {output[vcf_sample]}
        """
          
        

        

