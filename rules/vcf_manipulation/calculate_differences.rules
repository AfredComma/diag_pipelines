rule calculate_statistics_from_vcf_to_reference:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        "samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/{sample}.vcf.gz",
    output:
        "samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/final_stats.txt",
    shell:
        """
        bcftools stats -f PASS {input[0]} > {output[0]}
        """

        
rule calculate_unknowns_from_vcf_to_reference:
    input:
        "samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/{sample}.vcf",
    output:
        "samples/{sample}/snps/{snp_caller}/{ref}/{mapping_method}/final_stats_unknown_{filter}.txt",
    shell:
        """
        diff=$(grep -v "^\#" {input[0]} | grep -c "{wildcards.filter}") || :
        echo {wildcards.sample} {wildcards.ref} ${{diff}} > {output[0]}
        """


rule calculate_distances_from_merged_pairs_of_vcf:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/{sample1}_-_{sample2}.vcf.gz",
    output:
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/{sample1}_-_{sample2}_merged_distance.txt"),
    shell:
        """
        snps=$(bcftools view -f PASS {input[0]} | bcftools query -f '[%GT ]\\n' - | awk '$1!=$2' | wc -l)
        echo {wildcards.sample1} {wildcards.sample2} ${{snps}} > {output[0]}
        """

rule calculate_unknown_positions_from_merged_pairs_of_vcf:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/{sample1}_-_{sample2}.vcf",
    output:
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/{sample1}_-_{sample2}_unknown_{filter}.txt"),
    shell:
        """
        snps=$(grep -v "^#" {input[0]} | grep -c {wildcards.filter}) || :
        echo {wildcards.sample1} {wildcards.sample2} ${{snps}} > {output[0]}
        """
        
rule calculate_statistics_from_pairs_of_vcf:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        "samples/{sample1}/snps/{snp_caller}/{ref}/{mapping_method}/{sample1}.vcf.gz",
        "samples/{sample2}/snps/{snp_caller}/{ref}/{mapping_method}/{sample2}.vcf.gz",
    output:
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/{sample1}_-_{sample2}_stats.txt)")
    shell:
        """
        bcftools stats {input} > {output[0]}
        """

        
rule agregate_unknowns_from_merged_pairs_of_vcf:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        pairs=expand("typing/{{snp_caller}}/core_parsnp/{{ref}}/{{mapping_method}}/vcfs/{sample1}_-_{sample2}_unknown_{{filter}}.txt", zip, sample1 = all_combined_1, sample2 = all_combined_2),
        to_ref=expand("samples/{sample}/snps/{{snp_caller}}/{{ref}}/{{mapping_method}}/final_stats_unknown_{{filter}}.txt", sample=read_naming.keys())
    output:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/unknown_{filter}_from_merged_pairs_of_vcf.txt"
    shell:
        """
        cat {input} >> {output[0]}
        """
        
        
rule agregate_distances_from_merged_pairs_of_vcf:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        pairs=expand("typing/{{snp_caller}}/core_parsnp/{{ref}}/{{mapping_method}}/vcfs/{sample1}_-_{sample2}_merged_distance.txt", zip, sample1 = all_combined_1, sample2 = all_combined_2),
        to_ref=expand("samples/{sample}/snps/{{snp_caller}}/{{ref}}/{{mapping_method}}/final_stats.txt", sample=read_naming.keys())
    output:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/distances_from_merged_pairs_of_vcf.txt"
    shell:
        """
        for i in {input[pairs]}
        do
            cat ${{i}} >> {output[0]}
        done
        for i in {input[to_ref]}
        do
            id="$(echo ${{i}} | sed "s/samples\///" | sed "s/\/.*//") {wildcards.ref}"
            snps=$(grep "^SN" ${{i}} | grep "SNPs" | awk '$2 !=2 {{print $NF}}' | awk '{{count=count+$1}}END{{print count}}')
            echo ${{id}} ${{snps}} >> {output[0]}
        done
        """

rule extract_alignment_for_phylogeny:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/merged.vcf.gz",
    output:
        "typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/alignment.fa"
    shell:
        """
        printf ">{wildcards.ref}\\n" > {output[0]}
        bcftools query -f %REF {input[0]} >> {output[0]}
        printf "\\n" >> {output[0]}
        for samp in $(bcftools query -l {input[0]})
        do
            printf '>'${{samp}}'\\n' 
            bcftools query -s ${{samp}} -f '[%TGT]' {input[0]} | sed "s/\./N/g"
            printf '\\n'
        done >> {output[0]}
        """

