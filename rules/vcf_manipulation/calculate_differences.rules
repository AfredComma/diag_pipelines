rule calculate_pairwise_distances_by_type:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        joint_genotype_vcf="typing/{snp_caller}/full_genome/{ref}/{mapping_method}/filtered/all_samples_{type}.vcf.gz",
        joint_genotype_vcf_tbi="typing/{snp_caller}/full_genome/{ref}/{mapping_method}/filtered/all_samples_{type}.vcf.gz.tbi",
        bed="core_genome/{core_method}/{ref}.bed",
    output:
        dist_pair=temp("typing/{snp_caller}/core_{core_method}/{ref}/{mapping_method}/distances/{sample1}_-_{sample2}_distance_in_{type}.txt"),
    shell:
        """
        snps=$(bcftools view -R {input[bed]} -s {wildcards.sample1},{wildcards.sample2} {input[joint_genotype_vcf]} | bcftools query -f '[%GT ]\\n' | grep -v "\." | awk '$1!=$2' | wc -l) || :
        echo {wildcards.sample1} {wildcards.sample2} ${{snps}} > {output[dist_pair]}   
        """

rule get_snps_positions_by_type:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        joint_genotype_vcf="typing/{snp_caller}/full_genome/{ref}/{mapping_method}/filtered/all_samples_{type}.vcf.gz",
        joint_genotype_vcf_tbi="typing/{snp_caller}/full_genome/{ref}/{mapping_method}/filtered/all_samples_{type}.vcf.gz.tbi",
        bed="core_genome/{core_method}/{ref}.bed",
    output:
        snp_pos=temp("typing/{snp_caller}/core_{core_method}/{ref}/{mapping_method}/positions/{sample1}_-_{sample2}_in_{type}.txt"),
        variant_vcf=temp("typing/{snp_caller}/core_{core_method}/{ref}/{mapping_method}/vcf/{sample1}_-_{sample2}_in_{type}.vcf")
    shell:
        """
        bcftools view -R {input[bed]} -s {wildcards.sample1},{wildcards.sample2} {input[joint_genotype_vcf]} | bcftools query -f '%CHROM %POS [%GT ]\\n' | awk '$3!=$4 && $3!="." && $4!="."' | cut -f 1,2 -d' ' | sed "s/ /\\t/g" > {output[snp_pos]}
        bcftools view -R {output[snp_pos]} -s {wildcards.sample1},{wildcards.sample2} {input[joint_genotype_vcf]} > {output[variant_vcf]}
        """

rule calculate_distance_with_ref_by_type:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        joint_genotype_vcf="typing/{snp_caller}/full_genome/{ref}/{mapping_method}/filtered/all_samples_{type}.vcf.gz",
        joint_genotype_vcf_tbi="typing/{snp_caller}/full_genome/{ref}/{mapping_method}/filtered/all_samples_{type}.vcf.gz.tbi",
        bed="core_genome/{core_method}/{ref}.bed",
    output:
        dist_ref=temp("typing/{snp_caller}/core_{core_method}/{ref}/{mapping_method}/distances/to_ref/{sample}_distance_in_{type}.txt"),
    shell:
        """
        snps=$(bcftools view -R {input[bed]} -s {wildcards.sample} {input[joint_genotype_vcf]} | bcftools query -f '[%GT ]\\n' | grep -v "\." | grep -v "0" | wc -l) || :
        echo {wildcards.ref} {wildcards.sample} ${{snps}} > {output[dist_ref]}
        """

    
rule agregate_distances_from_joint_genotyping_by_type:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        pairs=expand("typing/{{snp_caller}}/core_{{core_method}}/{{ref}}/{{mapping_method}}/distances/{sample1}_-_{sample2}_distance_in_{{type}}.txt", zip, sample1 = all_combined_1, sample2 = all_combined_2),
        to_ref=expand("typing/{{snp_caller}}/core_{{core_method}}/{{ref}}/{{mapping_method}}/distances/to_ref/{sample}_distance_in_{{type}}.txt", sample=read_naming.keys())
    output:
        "typing/{snp_caller}/core_{core_method}/{ref}/{mapping_method}/distances_{type}.txt"
    run:
        with open(output, "w") as outfile:
            for fname in list(input.pairs) + list(input.to_ref):
                with open(fname) as infile:
                    outfile.write(infile.read())



rule extract_alignment_for_phylogeny:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        vcf="typing/{snp_caller}/full_genome/{ref}/{mapping_method}/filtered/all_samples_snp.vcf.gz",
        vcf_tbi="typing/{snp_caller}/full_genome/{ref}/{mapping_method}/filtered/all_samples_snp.vcf.gz.tbi",
        bed="core_genome/core_{core_method}/{ref}.bed",
    output:
        alignment="typing/{snp_caller}/core_{core_method}/{ref}/{mapping_method}/alignment.fa"
    shell:
        """
        printf ">{wildcards.ref}\\n" > {output[alignment]}
        bcftools query -R {input[bed]} -f %REF {input[vcf]} >> {output[alignment]}
        printf "\\n" >> {output[alignment]}
        for samp in $(bcftools query -l {input[vcf]})
        do
            printf '>'${{samp}}'\\n' 
            bcftools query -R {input[bed]} -s ${{samp}} -f '[%TGT]' {input[vcf]} | sed "s/\./N/g"
            printf '\\n'
        done >> {output[alignment]}
        """
