rule merge_vcf_pairs:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        "samples/{sample1}/snps/{snp_caller}/{ref}/{mapping_method}/coverage_filtered_mnp_decomposed_indel_filtered.vcf.gz",
        "samples/{sample2}/snps/{snp_caller}/{ref}/{mapping_method}/coverage_filtered_mnp_decomposed_indel_filtered.vcf.gz",
        "samples/{sample1}/snps/{snp_caller}/{ref}/{mapping_method}/coverage_filtered_mnp_decomposed_indel_filtered.vcf.gz.tbi",
        "samples/{sample2}/snps/{snp_caller}/{ref}/{mapping_method}/coverage_filtered_mnp_decomposed_indel_filtered.vcf.gz.tbi",
    output:
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/{sample1}_-_{sample2}.vcf"),
    shell:
        """
        bcftools merge {input[0]} {input[1]} -0 -O v > {output[0]}
        """

rule merge_all_vcfs_no_indels:
    conda:
        "../../envs/vt-bcftools.yaml"
    input:
        vcfs=expand("samples/{sample}/snps/freebayes/{{ref}}/{{mapping_method}}/{sample}.vcf.gz", sample=read_naming.keys())
    output:
        temp("typing/{snp_caller}/core_parsnp/{ref}/{mapping_method}/vcfs/merged.vcf.gz"),
    shell:
        """
        bcftools merge -f PASS,hicov,lowcov,freq -0 -O v {input[vcfs]} > {output[0]}
        """
        


