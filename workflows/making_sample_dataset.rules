import sys
import pandas
import re

pipeline_path = workflow.basedir + "/../../"

def get_folders_structure_with_sample_naming(link_dir, func):
    folders = {}
    samp_names = func(link_dir)
    for key in samp_names.keys():
        folders[key] = "."
    original_name = { x : x for x in samp_names.keys()}
    for i in os.listdir(link_dir):
        if os.path.isdir(link_dir + "/" + i):
            l = func(link_dir+"/"+i)
            k = { i + "_" + x : y for x, y in l.items()}
            u = { i + "_" + x : x for x in l.keys()}
            for key in k.keys():
                folders[key]=i
            samp_names = { ** samp_names, **k}
            original_name = { ** original_name, **u}
    return(samp_names, folders, original_name)

def get_read_naming_patterns(directory):
    result = []
    extension= {}
    for fname in os.listdir(directory):
        if fname.endswith("fastq.gz") or fname.endswith("fq.gz") or fname.endswith("fastq") or fname.endswith("fq"):
            regex_str = '(_L0+[1-9]+)?_(R)?(1|2)(\.|_)'
            regex = re.compile(regex_str)
            ext = re.search(regex, fname)
            if ext is None:
                ext = re.search(r'f(?:ast)?q(?:\.gz)?', fname)
                samp = re.sub("\.$", "", re.search(r'^([^\.]*)\.*', fname).group(0))
                if samp in extension.keys():
                    if ext.group(0).endswith(".gz"):
                        extension[samp]=[ext.group(0)]
                else:
                    extension[samp]=[ext.group(0)]
            else:
                regex_after = re.compile(regex_str+".*")
                regex_before = re.compile(".*"+regex_str)
                read = re.compile(re.search(regex_after, fname).group(0))
                samp = re.sub(regex, '', re.search(regex_before, fname).group(0))
                extension.setdefault(samp, [])
                extension[samp].append(re.sub("^_", "", read.pattern))
    return(extension)

all_samples=pandas.DataFrame()

link_directory="links/"
    
sras_ext = {}
sras_folder = {}
reads_sra = {}

reads_local = {}
folders = {}
original_name = {}

if "local_samples" not in config.keys() and "sra_samples" not in config.keys():
    raise ValueError("No samples defined in the config file")

if "local_samples" in config.keys():
    local_data = pandas.read_csv(config["local_samples"], sep="\t", index_col=0)
    local_data.index = [str(x) for x in local_data.index]
    all_local_sample_names =  "".join(list(local_data.index))
    if "(" in all_local_sample_names or ")" in all_local_sample_names or "_-_" in all_local_sample_names:
        raise ValueError("Forbidden character in sample name in sample name file")
    reads_local, folders, original_name = get_folders_structure_with_sample_naming(link_directory, get_read_naming_patterns)
    read_correct = {}
    original_correct = {}
    folders_correct = {}
    if "OldSampleName" not in list(local_data):
        for i in list(local_data.index):
            regex = re.compile(r'%s([^a-zA-Z0-9]|$)' % i)
            match = [bool(re.match(regex, x)) for x in sorted(list(folders.keys()))]
            if sum(match) != 1:
                raise ValueError("Problem matching SampleNames to read file names")
            sample=str(sorted(list(folders.keys()))[match.index(True)])
            folders_correct[i] = folders[sample]
            original_correct[i] = original_name[sample]
            read_correct[i] = reads_local[sample]
    else:
        for i in list(local_data["OldSampleName"]):
            regex = re.compile(r'%s([^a-zA-Z0-9]|$)' % i)
            match = [ bool(re.match(regex, x)) for x in sorted(list(folders.keys()))]
            if sum(match) != 1:
                raise ValueError("Problem matching OldSampleName to read file names")
            old_sample_name=str(sorted(list(folders.keys()))[match.index(True)])
            sample=str(local_data.index[local_data['OldSampleName'] == i][0])
            folders_correct[sample] = folders[old_sample_name]
            original_correct[sample] = original_name[old_sample_name]
            read_correct[sample] = reads_local[old_sample_name]
    original_name = original_correct
    reads_local = read_correct
    folders = folders_correct
    all_samples=local_data

if "sra_samples" in config.keys():
    sra_data = pandas.read_csv(config["sra_samples"], sep="\t", index_col=0)
    all_sra_sample_names =  "".join(list(sra_data["SampleName"]))
    if "(" in all_sra_sample_names or ")" in all_sra_sample_names or "_-_" in all_sra_sample_names:
        raise ValueError("Forbidden character in sample name in sra file") 
    for i in sra_data.index:
        if "size_MB" in list(sra_data):
            if sra_data.loc[i, "size_MB"] < 20:
                continue
        sample_name=sra_data.loc[i, "SampleName"].replace(" ", "_").replace("&", "and")
        if sample_name in reads_sra.keys():
            sample_name=sample_name+"_"+str(list(reads_sra.keys()).count(sample_name))
        reads_sra[sample_name]=str(i)
        sras_folder[sample_name]="."
        if sra_data.loc[i, "LibraryLayout"].lower()=="paired":
            sras_ext[sample_name]=["1.fastq.gz", "2.fastq.gz"]
        elif sra_data.loc[i, "LibraryLayout"].lower()=="single":
            sras_ext[sample_name]=["single.fastq.gz"]
        else:
            raise ValueError("Problem in the sra file")
        all_samples.loc[sample_name, "ScientificName"]=sra_data.loc[i, "ScientificName"]

read_naming = { **reads_local, **sras_ext}
original_name = { **original_name, **reads_sra}
folders = { **folders, **sras_folder}


