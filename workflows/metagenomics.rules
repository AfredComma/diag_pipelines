
# it is best practice to have a rule all at the top of the workflow which has all typically desired target files as input files.  

                
include:
    "making_sample_dataset.rules"

multiqc_configfile = pipeline_path + "data/configuration_files/multiqc/config.yaml"

rule all:
    input: 
        qualimap_report = "quality/multiqc/assembly/multiqc_report.html",
        buble_plot_maxbin = expand("samples/{sample}/binning/maxbin/gc_cov_buble_test.svg", sample = list(read_naming.keys())),
        kaiju_phylum = expand("samples/{sample}/binning/kaiju/report_phylum.txt", sample = list(read_naming.keys())),
        #chekm_maxbin = expand("samples/{sample}/binning/maxbin/checkm_bacteria/storage/bin_stats.analyze.tsv", sample = list(read_naming.keys()))
                
include:
    pipeline_path + "rules/metagenomic/binning.rules"
include:
    pipeline_path + "rules/metagenomic/quality_check.rules"

include:
    pipeline_path + "rules/read_manipulation/get_reads.rules"

include:
    pipeline_path + "rules/read_manipulation/get_sras.rules"
    
include:
    pipeline_path + "rules/quality/trimmomatic.rules"

include:
    pipeline_path + "rules/quality/assembly_filtering.rules"

include:
    pipeline_path + "rules/quality/contamination.rules"

include:
    pipeline_path + "rules/mapping/bwa.rules"

include:
    pipeline_path + "rules/mapping/indexing_files.rules"

include:
    pipeline_path + "rules/assembly/spades.rules"

include:
    pipeline_path + "rules/annotation/prodigal.rules"

include:
    pipeline_path + "rules/report_generation/prepare_files_for_multiqc.rules"
    
include:
    pipeline_path + "rules/report_generation/multiqc.rules"

include:
    pipeline_path + "rules/report_generation/fastqc.rules"

include:
    pipeline_path + "rules/report_generation/quast.rules"

include:
    pipeline_path + "rules/report_generation/qualimap.rules"

rule report:
    input:
        qualimap_report = "quality/multiqc/assembly/multiqc_report.html",
        buble_plot_maxbin = expand("samples/{sample}/binning/maxbin/gc_cov_buble_test.svg", sample = list(read_naming.keys())),
        kaiju_phylum = expand("samples/{sample}/binning/kaiju/report_phylum.txt", sample = list(read_naming.keys())),
        chekm_maxbin = expand("samples/{sample}/binning/maxbin/checkm_bacteria/storage/bin_stats.analyze.tsv", sample = list(read_naming.keys()))
        #"samples/{sample}/binning/kaiju/report_phylum.txt",
        #"samples/{sample}/binning/maxbin/checkm_bacteria/storage/bin_stats.analyze.tsv",        
    output:
        "report.html"
        
    run:
        from snakemake.utils import report
        #with open(input[0]) as vcf:
        #    n_calls = sum(1 for l in vcf if not l.startswith("#"))
        #n_samples = list(read_naming.keys()
        print (input.kaiju_phylum)
        print (input.buble_plot_maxbin)
        report("""
        Metagenome assembly
        ===================================

        Number of samples:
        T1_
        
        """, output[0],
               T1=input[0])
    

