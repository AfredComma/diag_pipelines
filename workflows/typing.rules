import itertools

try:
    ref_ids_for_mapping
except NameError:
    try:
        ref_ids_for_mapping = config["ref_ids_for_mapping"]
    except KeyError:
        ref_ids_for_mapping = ""

try:
    species_taxid
except NameError:
    species_taxid = config["taxid"]

minimum_coverage=config["minimum_coverage_for_calling"]
minimum_alternate_frac=config["minimum_alternate_fraction_for_calling"]


prefix = "./"

include:
    prefix + "assembly_quality.rules"

all_combined_1, all_combined_2 = [], []
for i, j in (itertools.combinations(sorted(read_naming.keys()),2)):
    all_combined_1.append(i)
    all_combined_2.append(j)


prefix = "../rules/"
    
include:
    prefix + "core_genome/bed_creation.rules"

include:
    prefix + "downloading/fetch_single_reference.rules"
    
include:
    prefix + "quality/quality_mapping_to_reference.rules"
        
include:
    prefix + "mapping/bwa_to_reference.rules"

include:
    prefix + "mapping/find_closest_genomes.rules"

include:
    prefix + "snp_calling/freebayes.rules"

include:
    prefix + "snp_calling/gatk.rules"

include:
    prefix + "typing/snp_distance.rules"
    
include:
    prefix + "vcf_manipulation/filtering.rules"
    
include:
    prefix + "vcf_manipulation/merging.rules"
    
include:
    prefix + "vcf_manipulation/indexing.rules"

include:
    prefix + "vcf_manipulation/calculate_differences.rules"

include:
    prefix + "typing/mlst.rules"
 
include:
    prefix + "phylogeny/raxml.rules"

include:
    prefix + "phylogeny/image_creation.rules"

include:
    prefix + "report_generation/multiqc_reference.rules"
