import csv
import shutil
import sys

snakemake_path = "/home/sacha/Documents/new_strain/"

sys.path.insert(0, snakemake_path)

from helper_scripts.get_sample_naming_from_folder_general import get_read_naming_patterns

from helper_scripts.get_folder_and_subfolders import get_folders_structure_with_sample_naming

from helper_scripts.get_species import get_species_from_file

link_directory="links/"

def get_sample_names_correspondance(filename):
    corres = {}
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter='\t', quotechar='|')
        for row in [[s.strip() for s in inner] for inner in reader]:
            if row:
                cells = list(filter(None, row))
                corres[cells[0]] = cells[1].replace(" ", "_")
    return(corres)

sample_names="sample_names.tsv"
sample_correspondance = get_sample_names_correspondance(sample_names)

read_naming, folders, original_name  = get_folders_structure_with_sample_naming(link_directory, get_read_naming_patterns)

read_correct = {}
original_correct = {}
folders_correct = {}

for i in folders.keys():
    folders_correct[sample_correspondance[i]] = folders[i]

for i in original_name.keys():
    original_correct[sample_correspondance[i]] = original_name[i]

for i in read_naming.keys():
    read_correct[sample_correspondance[i]] = read_naming[i]


original_name = original_correct
read_naming = read_correct
folders = folders_correct

spec_for_mykrobe = 'staph'
resistance_prediction_softwares = ["mykrobe", "rgi", "abricate"]
species = "Staphylococcus aureus"
taxid = 1280

species_names = get_species_from_file("species.csv")
cov_cutoff = 5

ontology_file_aro = 'aro.obo'
ontology_file_mo = 'mo.obo'
ontology_file_ro = 'ro.obo'

genes =["gyrA", "grlA"]

prefix = "../../rules/"


include:
    prefix + "read_manipulation/get_reads.rules"

include:
    prefix + "downloading/fetch_references.rules"
    
include:
    prefix + "downloading/fetch_software.rules"

include:
    prefix + "downloading/fetch_virulence_factors.rules"
    
include:
    prefix + "mapping/snippy.rules"

include:
    prefix + "mapping/align_reads_to_genome.rules"

include:
    prefix + "phylogeny/raxml.rules"

include:
    prefix + "assembly/assembly.rules"

include:
    prefix + "annotation/prokka.rules"

include:
    prefix + "annotation/resistance.rules"

include:
    prefix + "annotation/virulence.rules"
    
include:
    prefix + "quality/multiqc.rules"

include:
    prefix + "quality/quality_assembly.rules"

include:
    prefix + "quality/quality_reads.rules"    
    
include:
    prefix + "typing/mlst.rules"

include:
    prefix + "typing/snps_distance.rules"
    
include:
    prefix + "typing/compare_methods.rules"

include:
    prefix + "core_genome_calculations/parsnp.rules"

include:
    prefix + "core_genome_calculations/extract_snps_core.rules"

    
rule something:
    input:
        expand("strains/{sample}/resistance/summary.xlsx", sample= read_naming.keys()),
        expand("strains/{sample}/virulence/{sample}_virulence_summary.xlsx", sample= read_naming.keys()),
        "quality/multiqc_report.html",
        "typing/mlst/summary.out"
    output:
        "report.html"
    shell:
        """
        echo "" > {output[0]}
        """
    
