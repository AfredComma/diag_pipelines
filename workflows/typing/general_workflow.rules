import csv
import shutil
import sys

snakemake_path = "/home/sacha/Documents/new_strain/"

sys.path.insert(0, snakemake_path)

import helper_scripts.get_sample_naming_from_link_folder as sample_naming

from helper_scripts.get_folder_and_subfolders import get_folders_structure_with_sample_naming

import helper_scripts.get_species_and_sample_correspondance as get_species_sample


link_directory="links/"


if config["sample_naming_type"] == "molis":
    read_naming, folders, original_name  = get_folders_structure_with_sample_naming(link_directory, sample_naming.get_read_naming_patterns_molis)
else:
    read_naming, folders, original_name  = get_folders_structure_with_sample_naming(link_directory, sample_naming.get_read_naming_patterns_general)
    if config["sample_names"]:
        sample_correspondance = get_species_sample.get_sample_names_correspondance_from_file(config["sample_names"])
        read_correct = {}
        original_correct = {}
        folders_correct = {}
        for i in folders.keys():
            folders_correct[sample_correspondance[i]] = folders[i]
        for i in original_name.keys():
            original_correct[sample_correspondance[i]] = original_name[i]
        for i in read_naming.keys():
            read_correct[sample_correspondance[i]] = read_naming[i]
        original_name = original_correct
        read_naming = read_correct
        folders = folders_correct


resistance_prediction_sofwares = config["resistance_prediction_softwares"]

species_names = get_species_sample.get_species_from_file(config["species_names_correspondance_file"])

if isinstance(config["currated_genes"], str) and config["currated_genes"] != "":
    genes = []
    with open(config["currated_genes"]) as csvfile:
        reader = csv.reader(csvfile, delimiter="\t")
        for row in reader:
            genes.append(row[1])
elif isinstance(config["currated_genes"], list):
    genes=config["currated_genes"]
else:
    raise ValueError("Currated gene variable ill defined : {}".format(config["currated_genes"]))


    
prefix = "../../rules/"


include:
    prefix + "read_manipulation/get_reads.rules"

include:
    prefix + "downloading/fetch_references.rules"
    
include:
    prefix + "downloading/fetch_software.rules"

include:
    prefix + "downloading/fetch_virulence_factors.rules"

include:
    prefix + "mapping/snippy.rules"

include:
    prefix + "mapping/align_reads_to_genome.rules"

include:
    prefix + "mapping/find_closest_genomes.rules"

include:
    prefix + "phylogeny/raxml.rules"

include:
    prefix + "assembly/assembly.rules"

include:
    prefix + "annotation/prokka.rules"

include:
    prefix + "annotation/resistance.rules"

include:
    prefix + "annotation/virulence.rules"
    
include:
    prefix + "quality/multiqc.rules"

include:
    prefix + "quality/quality_assembly.rules"

include:
    prefix + "quality/quality_reads.rules"    

include:
    prefix + "quality/contamination.rules"
    
include:
    prefix + "typing/mlst.rules"

include:
    prefix + "typing/vcf_manipulations.rules"
    
include:
    prefix + "typing/snps_distance.rules"
    
include:
    prefix + "typing/compare_methods.rules"

include:
    prefix + "typing/cgmlst.rules"

include:
    prefix + "core_genome_calculations/parsnp.rules"

    
rule something:
    input:
        expand("strains/{sample}/core/32428/snps.vcf.gz", sample = read_naming.keys())

    
