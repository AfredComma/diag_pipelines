import csv
import os
import shutil

def get_read_naming_patterns(directory):
    result = []
    extension= {}
    for fname in os.listdir(directory):
        if fname.endswith("fastq.gz") or fname.endswith("fq.gz") or fname.endswith("fastq") or fname.endswith("fq"):
            ext = re.search(r'_R(1|2)(\.|_).*', fname)
            if ext is None:
                ext = re.search(r'f(?:ast)?q(?:\.gz)?', fname)
                samp = re.sub("\.$", "", re.search(r'^([^\.]*)\.*', fname).group(0))
                if samp in extension.keys():
                    if ext.group(0).endswith(".gz"):
                        extension[samp]=[ext.group(0)]
                else:
                    extension[samp]=[ext.group(0)]
            else:
                read = re.compile(re.search(r'_R(1|2)(\.|_)', fname).group(0).replace("_", "").replace(".", ""))
                samp = re.sub(r'_R(1|2)$', '', re.search(r'.*_R(1|2)', fname).group(0))
                extension.setdefault(samp, [])
                match = list(filter(read.match, extension[samp]))
                if len(match) == 1:
                    if match[0].endswith("fastq") or match[0].endswith("fq"):
                        extension[samp].remove(match[0])
                        extension[samp].append(re.sub("^_", "", ext.group(0)))
                else:
                    extension[samp].append(re.sub("^_", "", ext.group(0)))
    return(extension)


def get_sample_names_correspondance(filename):
    corres = {}
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter='\t', quotechar='|')
        for row in [[s.strip() for s in inner] for inner in reader]:
            cells = list(filter(None, row))
            corres[cells[0]] = cells[1].replace(" ", "_")
    return(corres)

link_directory="links/"

if os.path.isfile("sample_names.tsv"):
    sample_correspondance = get_sample_names_correspondance("sample_names.tsv")
else:
    sample_correspondance = { x:x for x in read_naming.keys()}

folders = {}
read_naming = get_read_naming_patterns(link_directory)

for key in read_naming.keys():
    folders[key] = "."
original_name = { x : x for x in read_naming.keys()}

db_to_use = "myco"
spec_for_mykrobe = "tb"
mysql_conf_file = "/home/sacha/.my.cnf"
sample_names = "sample_names.tsv"
resistance_prediction_softwares = ["mykrobe", "rgi"]
currated_genes_file = "resistance_genes.csv"

genes = []
with open(currated_genes_file) as csvfile:
    reader = csv.reader(csvfile, delimiter="\t")
    for row in reader:
        genes.append(row[1])

ontology_file_aro = 'aro.obo'
ontology_file_mo = 'mo.obo'
ontology_file_ro = 'ro.obo'

for i in os.listdir(link_directory):
    if os.path.isdir(link_directory + "/" + i):
        l = get_read_naming_patterns(link_directory+"/"+i)
        k = { i + "_" + x : y for x, y in l.items()}
        u = { i + "_" + x : x for x in l.keys()}
        for key in k.keys():
            folders[key]=i
        read_naming = { ** read_naming, **k}
        original_name = { ** original_name, **u}

prefix = "../../rules/"

include:
    prefix + "read_manipulation/get_reads.rules"

include:
    prefix + "downloading/fetch_references.rules"

include:
    prefix + "mapping/snippy.rules"

include:
    prefix + "mapping/align_reads_to_genome.rules"

include:
    prefix + "phylogeny/raxml.rules"

include:
    prefix + "assembly/assembly.rules"

include:
    prefix + "db_management/creation.rules"

include:
    prefix + "db_management/insert_data.rules"

include:
    prefix + "db_management/fetch_data.rules"

include:
    prefix + "annotation/prokka.rules"

include:
    prefix + "annotation/resistance.rules"
    
include:
    prefix + "quality/multiqc.rules"

include:
    prefix + "quality/quality_assembly.rules"

include:
    prefix + "quality/quality_reads.rules"    
    
include:
    prefix + "typing/mlst.rules"

include:
    prefix + "typing/snps_distance.rules"
    
include:
    prefix + "typing/compare_methods.rules"



rule something:
    input:
        expand("strains/{sample}/logs/rgi_db.txt", sample= read_naming.keys())
    output:
        "report.html"
    shell:
        """
        echo "" > {output[0]}
        """
    
